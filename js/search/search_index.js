var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Config.html",[0,0.158,1,0.285]],["body/interfaces/Config.html",[0,0.299,1,0.346,2,0.41,3,0.41,4,0.41,5,0.351,6,0.243,7,0.147,8,0.351,9,0.351,10,0.49,11,0.634,12,0.872,13,0.53,14,0.048,15,0.951,16,0.785,17,0.784,18,0.421,19,0.675,20,0.675,21,0.675,22,0.675,23,0.584,24,0.786,25,0.786,26,0.68,27,0.474,28,0.584,29,0.634,30,0.474,31,0.68,32,0.474,33,0.784,34,0.742,35,0.584,36,0.41,37,0.41,38,0.634,39,0.37,40,0.41,41,0.617,42,0.41,43,0.584,44,0.856,45,0.746,46,0.49,47,0.564,48,0.41,49,0.582,50,0.41,51,0.675,52,0.49,53,0.634,54,0.5,55,0.351,56,0.41,57,0.68,58,0.584,59,0.422,60,0.786,61,0.474,62,0.628,63,0.68,64,0.675,65,0.474,66,0.474,67,0.474,68,0.474,69,0.474,70,0.474,71,0.584,72,0.584,73,0.675,74,0.474,75,0.474,76,0.584,77,0.584,78,0.421,79,0.675,80,0.634,81,0.675,82,0.41,83,0.41,84,0.474,85,0.786,86,0.41,87,0.584,88,0.68,89,0.41,90,0.474,91,0.675,92,0.675,93,0.675,94,0.675,95,0.474,96,0.41,97,0.474,98,0.584,99,0.474,100,0.474,101,0.474,102,0.786,103,0.474,104,0.41,105,0.637,106,0.786,107,0.742,108,0.786,109,0.786,110,0.786,111,0.786,112,0.786,113,0.786,114,0.582,115,0.474,116,0.474,117,0.474,118,0.474,119,0.474,120,0.474,121,0.41,122,0.41,123,0.49,124,0.584,125,0.675,126,0.675,127,0.675,128,0.786,129,0.675,130,0.675,131,0.5,132,0.68,133,0.474,134,0.474,135,0.474,136,0.584,137,0.675,138,0.474,139,0.474,140,0.474,141,0.032,142,0.584,143,0.295,144,0.584,145,0.68,146,0.351,147,0.41,148,0.41,149,0.41,150,0.474,151,0.474,152,0.474,153,0.474,154,0.584,155,0.786,156,0.351,157,0.474,158,0.41,159,0.474,160,0.41,161,0.41,162,0.41,163,0.028]],["title/interfaces/DependencyValidations.html",[0,0.158,123,0.347]],["body/interfaces/DependencyValidations.html",[0,0.296,1,0.227,2,0.384,3,0.384,4,0.384,5,0.328,6,0.227,7,0.137,8,0.328,9,0.328,10,0.472,11,0.328,12,0.797,13,0.534,14,0.048,15,0.938,16,0.777,17,0.764,18,0.401,19,0.643,20,0.643,21,0.643,22,0.643,23,0.557,24,0.757,25,0.757,26,0.656,27,0.443,28,0.557,29,0.615,30,0.443,31,0.656,32,0.443,33,0.764,34,0.719,35,0.557,36,0.384,37,0.384,38,0.615,39,0.36,40,0.384,41,0.606,42,0.384,43,0.557,44,0.882,45,0.792,46,0.472,47,0.55,48,0.384,49,0.561,50,0.384,51,0.643,52,0.472,53,0.615,54,0.476,55,0.328,56,0.384,57,0.656,58,0.557,59,0.421,60,0.831,61,0.443,62,0.618,63,0.656,64,0.643,65,0.443,66,0.443,67,0.443,68,0.443,69,0.443,70,0.443,71,0.557,72,0.656,73,0.757,74,0.443,75,0.443,76,0.557,77,0.557,78,0.401,79,0.643,80,0.653,81,0.643,82,0.384,83,0.384,84,0.443,85,0.757,86,0.384,87,0.557,88,0.656,89,0.384,90,0.443,91,0.643,92,0.643,93,0.643,94,0.643,95,0.443,96,0.384,97,0.443,98,0.557,99,0.443,100,0.443,101,0.443,102,0.831,103,0.443,104,0.384,105,0.663,106,0.831,107,0.764,108,0.831,109,0.831,110,0.831,111,0.831,112,0.831,113,0.831,114,0.561,115,0.443,116,0.443,117,0.443,118,0.443,119,0.443,120,0.443,121,0.384,122,0.384,123,0.518,124,0.656,125,0.757,126,0.757,127,0.757,128,0.882,129,0.757,130,0.757,131,0.561,132,0.764,133,0.443,134,0.443,135,0.443,136,0.822,137,0.831,138,0.643,139,0.643,140,0.643,141,0.034,142,0.822,143,0.401,144,0.719,145,0.797,146,0.476,147,0.557,148,0.764,149,0.557,150,0.443,151,0.443,152,0.443,153,0.443,154,0.557,155,0.757,156,0.328,157,0.443,158,0.384,159,0.443,160,0.384,161,0.384,162,0.384,163,0.027,164,0.652]],["title/interfaces/Flex.html",[0,0.158,41,0.347]],["body/interfaces/Flex.html",[0,0.3,1,0.244,2,0.412,3,0.412,4,0.412,5,0.352,6,0.244,7,0.147,8,0.352,9,0.352,10,0.491,11,0.352,12,0.816,13,0.524,14,0.048,15,0.952,16,0.786,17,0.785,18,0.422,19,0.677,20,0.677,21,0.677,22,0.677,23,0.586,24,0.788,25,0.788,26,0.682,27,0.476,28,0.586,29,0.636,30,0.476,31,0.682,32,0.476,33,0.785,34,0.743,35,0.586,36,0.412,37,0.412,38,0.636,39,0.371,40,0.412,41,0.651,42,0.412,43,0.586,44,0.858,45,0.747,46,0.491,47,0.565,48,0.412,49,0.584,50,0.412,51,0.677,52,0.491,53,0.636,54,0.501,55,0.352,56,0.412,57,0.682,58,0.586,59,0.423,60,0.788,61,0.476,62,0.628,63,0.682,64,0.677,65,0.476,66,0.476,67,0.476,68,0.476,69,0.476,70,0.476,71,0.586,72,0.586,73,0.677,74,0.476,75,0.476,76,0.586,77,0.586,78,0.422,79,0.677,80,0.636,81,0.677,82,0.412,83,0.412,84,0.476,85,0.788,86,0.412,87,0.586,88,0.682,89,0.412,90,0.476,91,0.677,92,0.677,93,0.677,94,0.677,95,0.476,96,0.412,97,0.476,98,0.586,99,0.476,100,0.476,101,0.476,102,0.788,103,0.476,104,0.412,105,0.637,106,0.788,107,0.743,108,0.788,109,0.788,110,0.788,111,0.788,112,0.788,113,0.788,114,0.584,115,0.476,116,0.476,117,0.476,118,0.476,119,0.476,120,0.476,121,0.412,122,0.412,123,0.491,124,0.586,125,0.677,126,0.677,127,0.677,128,0.788,129,0.677,130,0.677,131,0.501,132,0.682,133,0.476,134,0.476,135,0.476,136,0.586,137,0.677,138,0.476,139,0.476,140,0.476,141,0.032,142,0.586,143,0.297,144,0.586,145,0.682,146,0.352,147,0.412,148,0.412,149,0.412,150,0.476,151,0.476,152,0.476,153,0.476,154,0.586,155,0.788,156,0.352,157,0.476,158,0.412,159,0.476,160,0.412,161,0.412,162,0.412,163,0.028]],["title/interfaces/Function.html",[0,0.158,114,0.412]],["body/interfaces/Function.html",[0,0.299,1,0.24,2,0.404,3,0.404,4,0.404,5,0.346,6,0.24,7,0.145,8,0.346,9,0.346,10,0.486,11,0.346,12,0.811,13,0.529,14,0.048,15,0.955,16,0.784,17,0.78,18,0.416,19,0.668,20,0.668,21,0.668,22,0.668,23,0.578,24,0.78,25,0.78,26,0.675,27,0.467,28,0.578,29,0.667,30,0.467,31,0.675,32,0.467,33,0.78,34,0.737,35,0.578,36,0.404,37,0.404,38,0.63,39,0.368,40,0.404,41,0.615,42,0.404,43,0.578,44,0.851,45,0.744,46,0.486,47,0.561,48,0.404,49,0.578,50,0.404,51,0.851,52,0.486,53,0.63,54,0.495,55,0.346,56,0.404,57,0.675,58,0.578,59,0.421,60,0.78,61,0.467,62,0.626,63,0.675,64,0.668,65,0.467,66,0.467,67,0.467,68,0.467,69,0.467,70,0.467,71,0.578,72,0.578,73,0.668,74,0.467,75,0.467,76,0.578,77,0.578,78,0.416,79,0.668,80,0.63,81,0.668,82,0.404,83,0.404,84,0.467,85,0.78,86,0.404,87,0.675,88,0.675,89,0.404,90,0.467,91,0.668,92,0.668,93,0.668,94,0.668,95,0.467,96,0.404,97,0.467,98,0.578,99,0.467,100,0.467,101,0.467,102,0.78,103,0.467,104,0.404,105,0.635,106,0.78,107,0.737,108,0.78,109,0.78,110,0.78,111,0.78,112,0.78,113,0.78,114,0.667,115,0.467,116,0.467,117,0.467,118,0.467,119,0.467,120,0.467,121,0.404,122,0.404,123,0.486,124,0.578,125,0.668,126,0.668,127,0.668,128,0.78,129,0.668,130,0.668,131,0.495,132,0.675,133,0.467,134,0.467,135,0.467,136,0.578,137,0.668,138,0.467,139,0.467,140,0.467,141,0.032,142,0.578,143,0.291,144,0.578,145,0.675,146,0.346,147,0.404,148,0.404,149,0.404,150,0.467,151,0.467,152,0.467,153,0.467,154,0.811,155,0.986,156,0.63,157,0.467,158,0.404,159,0.467,160,0.404,161,0.404,162,0.404,163,0.028,164,0.687]],["title/interfaces/KeyValue.html",[0,0.158,45,0.412]],["body/interfaces/KeyValue.html",[0,0.3,1,0.245,2,0.413,3,0.413,4,0.413,5,0.353,6,0.348,7,0.21,8,0.353,10,0.297,11,0.353,12,0.817,13,0.517,14,0.048,15,0.949,16,0.786,17,0.786,18,0.423,19,0.678,20,0.678,21,0.678,22,0.678,23,0.587,24,0.789,25,0.789,26,0.683,27,0.477,28,0.587,29,0.636,30,0.477,31,0.683,32,0.477,33,0.786,34,0.786,35,0.587,36,0.413,37,0.413,38,0.636,39,0.371,40,0.413,41,0.618,42,0.413,43,0.587,44,0.859,45,0.758,46,0.492,47,0.566,48,0.413,49,0.584,50,0.413,51,0.678,52,0.492,53,0.636,54,0.502,55,0.353,56,0.413,57,0.683,58,0.587,59,0.423,60,0.789,61,0.477,62,0.629,63,0.683,64,0.678,65,0.477,66,0.477,67,0.477,68,0.477,69,0.477,70,0.477,71,0.587,72,0.587,73,0.678,74,0.477,75,0.477,76,0.587,77,0.587,78,0.423,79,0.678,80,0.636,81,0.678,82,0.413,83,0.413,84,0.477,85,0.789,86,0.413,87,0.587,88,0.683,89,0.413,90,0.477,91,0.678,92,0.678,93,0.678,94,0.678,95,0.477,96,0.413,97,0.477,98,0.587,99,0.477,100,0.477,101,0.477,102,0.789,103,0.477,104,0.413,105,0.638,106,0.789,107,0.744,108,0.789,109,0.789,110,0.789,111,0.789,112,0.789,113,0.789,114,0.584,115,0.477,116,0.477,117,0.477,118,0.477,119,0.477,120,0.477,121,0.413,122,0.413,123,0.492,124,0.587,125,0.678,126,0.678,127,0.678,128,0.789,129,0.678,130,0.678,131,0.502,132,0.683,133,0.477,134,0.477,135,0.477,136,0.587,137,0.678,138,0.477,139,0.477,140,0.477,141,0.033,142,0.587,143,0.297,144,0.587,145,0.683,146,0.353,147,0.413,148,0.413,149,0.413,150,0.477,151,0.477,152,0.477,153,0.477,154,0.587,155,0.789,156,0.353,157,0.477,158,0.413,159,0.477,160,0.413,161,0.413,162,0.413,163,0.028,165,1.987,166,1.686,167,2.444]],["title/interfaces/Layout.html",[0,0.158,39,0.227]],["body/interfaces/Layout.html",[0,0.298,1,0.238,2,0.402,3,0.402,4,0.402,5,0.344,6,0.238,7,0.144,8,0.344,9,0.344,10,0.485,11,0.344,12,0.81,13,0.538,14,0.048,15,0.943,16,0.783,17,0.778,18,0.415,19,0.665,20,0.665,21,0.665,22,0.665,23,0.576,24,0.778,25,0.778,26,0.673,27,0.465,28,0.576,29,0.629,30,0.465,31,0.673,32,0.465,33,0.778,34,0.735,35,0.576,36,0.402,37,0.402,38,0.629,39,0.382,40,0.402,41,0.671,42,0.402,43,0.778,44,0.849,45,0.743,46,0.485,47,0.56,48,0.402,49,0.576,50,0.402,51,0.665,52,0.485,53,0.629,54,0.493,55,0.344,56,0.402,57,0.673,58,0.576,59,0.421,60,0.778,61,0.465,62,0.625,63,0.673,64,0.665,65,0.465,66,0.465,67,0.465,68,0.465,69,0.465,70,0.465,71,0.576,72,0.576,73,0.665,74,0.465,75,0.465,76,0.576,77,0.576,78,0.415,79,0.665,80,0.629,81,0.665,82,0.402,83,0.402,84,0.465,85,0.778,86,0.402,87,0.576,88,0.673,89,0.402,90,0.465,91,0.665,92,0.665,93,0.665,94,0.665,95,0.465,96,0.402,97,0.465,98,0.673,99,0.465,100,0.465,101,0.465,102,0.778,103,0.465,104,0.402,105,0.634,106,0.778,107,0.735,108,0.778,109,0.778,110,0.778,111,0.778,112,0.778,113,0.778,114,0.576,115,0.465,116,0.465,117,0.465,118,0.465,119,0.465,120,0.465,121,0.402,122,0.402,123,0.485,124,0.576,125,0.665,126,0.665,127,0.665,128,0.778,129,0.665,130,0.665,131,0.493,132,0.673,133,0.465,134,0.465,135,0.465,136,0.576,137,0.665,138,0.465,139,0.465,140,0.465,141,0.032,142,0.576,143,0.29,144,0.576,145,0.673,146,0.344,147,0.402,148,0.402,149,0.402,150,0.465,151,0.465,152,0.465,153,0.465,154,0.576,155,0.778,156,0.344,157,0.665,158,0.576,159,0.665,160,0.735,161,0.735,162,0.735,163,0.027,164,0.684]],["title/interfaces/Leaf.html",[0,0.158,49,0.412]],["body/interfaces/Leaf.html",[0,0.298,1,0.235,2,0.396,3,0.396,4,0.396,5,0.339,6,0.235,7,0.142,8,0.339,9,0.339,10,0.481,11,0.339,12,0.805,13,0.541,14,0.048,15,0.953,16,0.781,17,0.773,18,0.41,19,0.658,20,0.658,21,0.658,22,0.658,23,0.57,24,0.843,25,0.843,26,0.73,27,0.458,28,0.57,29,0.624,30,0.458,31,0.667,32,0.458,33,0.849,34,0.73,35,0.57,36,0.396,37,0.396,38,0.71,39,0.401,40,0.396,41,0.611,42,0.396,43,0.57,44,0.843,45,0.775,46,0.481,47,0.557,48,0.396,49,0.662,50,0.73,51,0.843,52,0.611,53,0.624,54,0.487,55,0.339,56,0.396,57,0.667,58,0.57,59,0.419,60,0.771,61,0.458,62,0.623,63,0.667,64,0.658,65,0.458,66,0.458,67,0.458,68,0.458,69,0.458,70,0.458,71,0.57,72,0.57,73,0.658,74,0.458,75,0.458,76,0.57,77,0.57,78,0.41,79,0.658,80,0.624,81,0.658,82,0.396,83,0.396,84,0.458,85,0.771,86,0.396,87,0.57,88,0.667,89,0.396,90,0.458,91,0.658,92,0.658,93,0.658,94,0.658,95,0.458,96,0.396,97,0.458,98,0.57,99,0.458,100,0.458,101,0.458,102,0.771,103,0.458,104,0.396,105,0.632,106,0.771,107,0.73,108,0.771,109,0.771,110,0.771,111,0.771,112,0.771,113,0.771,114,0.571,115,0.458,116,0.458,117,0.458,118,0.458,119,0.458,120,0.458,121,0.396,122,0.396,123,0.481,124,0.57,125,0.658,126,0.658,127,0.658,128,0.771,129,0.658,130,0.658,131,0.487,132,0.667,133,0.458,134,0.458,135,0.458,136,0.57,137,0.658,138,0.458,139,0.458,140,0.458,141,0.032,142,0.57,143,0.285,144,0.57,145,0.667,146,0.339,147,0.396,148,0.396,149,0.396,150,0.458,151,0.458,152,0.458,153,0.458,154,0.57,155,0.771,156,0.74,157,0.458,158,0.396,159,0.458,160,0.396,161,0.396,162,0.396,163,0.027,164,0.673]],["title/interfaces/Metadata.html",[0,0.158,52,0.347]],["body/interfaces/Metadata.html",[0,0.297,1,0.231,2,0.39,3,0.39,4,0.39,5,0.334,6,0.231,7,0.14,8,0.334,9,0.334,10,0.477,11,0.334,12,0.896,13,0.543,14,0.048,15,0.956,16,0.779,17,0.769,18,0.406,19,0.651,20,0.651,21,0.651,22,0.651,23,0.564,24,0.765,25,0.765,26,0.662,27,0.451,28,0.564,29,0.686,30,0.451,31,0.662,32,0.451,33,0.769,34,0.725,35,0.564,36,0.39,37,0.39,38,0.62,39,0.363,40,0.39,41,0.609,42,0.39,43,0.564,44,0.837,45,0.758,46,0.477,47,0.554,48,0.39,49,0.566,50,0.39,51,0.651,52,0.522,53,0.749,54,0.482,55,0.334,56,0.39,57,0.846,58,0.801,59,0.43,60,0.837,61,0.651,62,0.664,63,0.725,64,0.925,65,0.651,66,0.651,67,0.651,68,0.651,69,0.651,70,0.651,71,0.564,72,0.564,73,0.651,74,0.451,75,0.451,76,0.564,77,0.564,78,0.406,79,0.651,80,0.62,81,0.651,82,0.39,83,0.39,84,0.451,85,0.765,86,0.39,87,0.564,88,0.662,89,0.39,90,0.451,91,0.651,92,0.651,93,0.651,94,0.651,95,0.451,96,0.39,97,0.451,98,0.564,99,0.451,100,0.451,101,0.451,102,0.765,103,0.451,104,0.39,105,0.63,106,0.765,107,0.725,108,0.765,109,0.765,110,0.765,111,0.765,112,0.765,113,0.765,114,0.566,115,0.451,116,0.451,117,0.451,118,0.451,119,0.451,120,0.451,121,0.39,122,0.39,123,0.477,124,0.564,125,0.651,126,0.651,127,0.651,128,0.765,129,0.651,130,0.651,131,0.482,132,0.662,133,0.451,134,0.451,135,0.451,136,0.564,137,0.651,138,0.451,139,0.451,140,0.451,141,0.032,142,0.564,143,0.281,144,0.564,145,0.662,146,0.334,147,0.39,148,0.39,149,0.39,150,0.451,151,0.451,152,0.451,153,0.451,154,0.564,155,0.765,156,0.566,157,0.451,158,0.39,159,0.451,160,0.39,161,0.39,162,0.39,163,0.027,164,0.664]],["title/modules/NDynamicRendererModule.html",[168,1.702,169,1.493]],["body/modules/NDynamicRendererModule.html",[1,0.576,3,0.529,4,0.529,5,0.452,6,0.46,7,0.335,11,0.733,13,0.412,14,0.048,16,0.452,29,0.595,38,0.452,39,0.249,59,0.328,80,0.595,131,0.595,141,0.033,156,0.595,163,0.033,164,0.898,166,2.837,168,2.747,169,2.823,170,3.17,171,1.869,172,2.543,173,3.736,174,2.543,175,3.344,176,3.736,177,2.543,178,2.543,179,2.543,180,3.847,181,3.344,182,2.543,183,2.543,184,3.736,185,3.128,186,3.128,187,4.114,188,3.344,189,3.128,190,3.128,191,4.114,192,4.114,193,3.344,194,4.114,195,4.114,196,3.128,197,4.114,198,3.344,199,3.344,200,4.596,201,4.596,202,3.128,203,4.114,204,3.128,205,4.114,206,4.114,207,3.128,208,4.581,209,4.596,210,2.543,211,3.344,212,2.543,213,3.128,214,4.114,215,3.344,216,4.114,217,4.114,218,3.128,219,4.114,220,3.128,221,4.114,222,4.114,223,2.543,224,4.114,225,2.543,226,4.114,227,2.543,228,3.969,229,3.128,230,3.128,231,4.114,232,3.128,233,4.114,234,3.128,235,4.114,236,3.128,237,2.543,238,4.114,239,4.114,240,3.128,241,3.128,242,3.128,243,3.128]],["title/interfaces/Options.html",[0,0.158,62,0.347]],["body/interfaces/Options.html",[0,0.293,1,0.214,2,0.361,3,0.361,4,0.361,5,0.308,6,0.315,7,0.19,8,0.308,9,0.308,10,0.455,11,0.308,12,0.806,13,0.561,14,0.048,15,0.944,16,0.769,17,0.745,18,0.383,19,0.614,20,0.614,21,0.614,22,0.614,23,0.532,24,0.73,25,0.73,26,0.632,27,0.416,28,0.532,29,0.597,30,0.416,31,0.632,32,0.416,33,0.745,34,0.779,35,0.632,36,0.361,37,0.361,38,0.597,39,0.351,40,0.361,41,0.596,42,0.361,43,0.532,44,0.992,45,0.762,46,0.455,47,0.536,48,0.361,49,0.541,50,0.361,51,0.614,52,0.455,53,0.597,54,0.541,55,0.308,56,0.361,57,0.632,58,0.532,59,0.433,60,0.73,61,0.416,62,0.656,63,0.745,64,0.614,65,0.416,66,0.416,67,0.416,68,0.416,69,0.416,70,0.416,71,0.779,72,0.632,73,0.73,74,0.614,75,0.614,76,0.779,77,0.698,78,0.503,79,0.806,80,0.667,81,0.806,82,0.532,83,0.745,84,0.614,85,0.955,86,0.532,87,0.632,88,0.827,89,0.532,90,0.614,91,0.931,92,0.806,93,0.806,94,0.931,95,0.614,96,0.532,97,0.614,98,0.632,99,0.614,100,0.614,101,0.614,102,0.806,103,0.614,104,0.532,105,0.647,106,0.806,107,0.745,108,0.806,109,0.806,110,0.806,111,0.806,112,0.806,113,0.806,114,0.689,115,0.416,116,0.416,117,0.416,118,0.416,119,0.416,120,0.416,121,0.361,122,0.361,123,0.455,124,0.532,125,0.614,126,0.614,127,0.614,128,0.73,129,0.614,130,0.614,131,0.455,132,0.632,133,0.416,134,0.416,135,0.416,136,0.532,137,0.614,138,0.416,139,0.416,140,0.416,141,0.03,142,0.532,143,0.26,144,0.532,145,0.632,146,0.308,147,0.361,148,0.361,149,0.361,150,0.416,151,0.416,152,0.416,153,0.416,154,0.532,155,0.73,156,0.799,157,0.416,158,0.361,159,0.416,160,0.361,161,0.361,162,0.361,163,0.025,164,0.613,165,1.734,166,1.471,244,2.133]],["title/interfaces/Panels.html",[0,0.158,18,0.347]],["body/interfaces/Panels.html",[0,0.296,1,0.227,2,0.384,3,0.384,4,0.384,5,0.328,6,0.227,7,0.137,8,0.328,9,0.328,10,0.518,11,0.328,12,0.797,13,0.542,14,0.048,15,0.959,16,0.777,17,0.858,18,0.472,19,0.757,20,0.757,21,0.831,22,0.757,23,0.656,24,0.831,25,0.831,26,0.719,27,0.443,28,0.797,29,0.653,30,0.643,31,0.842,32,0.643,33,0.872,34,0.764,35,0.656,36,0.557,37,0.557,38,0.72,39,0.405,40,0.557,41,0.618,42,0.557,43,0.656,44,0.92,45,0.771,46,0.606,47,0.55,48,0.384,49,0.561,50,0.384,51,0.643,52,0.472,53,0.615,54,0.476,55,0.328,56,0.384,57,0.656,58,0.557,59,0.417,60,0.757,61,0.443,62,0.618,63,0.656,64,0.643,65,0.443,66,0.443,67,0.443,68,0.443,69,0.443,70,0.443,71,0.557,72,0.557,73,0.643,74,0.443,75,0.443,76,0.557,77,0.557,78,0.401,79,0.643,80,0.615,81,0.643,82,0.384,83,0.384,84,0.443,85,0.757,86,0.384,87,0.557,88,0.656,89,0.384,90,0.443,91,0.643,92,0.643,93,0.643,94,0.643,95,0.443,96,0.384,97,0.443,98,0.557,99,0.443,100,0.443,101,0.443,102,0.757,103,0.443,104,0.384,105,0.627,106,0.757,107,0.719,108,0.757,109,0.757,110,0.757,111,0.757,112,0.757,113,0.757,114,0.561,115,0.443,116,0.443,117,0.443,118,0.443,119,0.443,120,0.443,121,0.384,122,0.384,123,0.472,124,0.557,125,0.643,126,0.643,127,0.643,128,0.757,129,0.643,130,0.643,131,0.476,132,0.656,133,0.443,134,0.443,135,0.443,136,0.557,137,0.643,138,0.443,139,0.443,140,0.443,141,0.031,142,0.557,143,0.276,144,0.557,145,0.656,146,0.328,147,0.384,148,0.384,149,0.384,150,0.443,151,0.443,152,0.443,153,0.443,154,0.557,155,0.757,156,0.734,157,0.443,158,0.384,159,0.443,160,0.384,161,0.384,162,0.384,163,0.027,164,0.652]],["title/interfaces/Section.html",[0,0.158,47,0.347]],["body/interfaces/Section.html",[0,0.298,1,0.236,2,0.399,3,0.399,4,0.399,5,0.341,6,0.236,7,0.143,8,0.341,9,0.341,10,0.482,11,0.341,12,0.807,13,0.537,14,0.048,15,0.948,16,0.782,17,0.775,18,0.412,19,0.774,20,0.774,21,0.661,22,0.774,23,0.67,24,0.846,25,0.846,26,0.732,27,0.461,28,0.573,29,0.626,30,0.461,31,0.67,32,0.461,33,0.851,34,0.732,35,0.573,36,0.399,37,0.399,38,0.711,39,0.401,40,0.399,41,0.612,42,0.399,43,0.573,44,0.846,45,0.776,46,0.482,47,0.612,48,0.732,49,0.663,50,0.399,51,0.661,52,0.482,53,0.626,54,0.49,55,0.341,56,0.399,57,0.67,58,0.573,59,0.42,60,0.774,61,0.461,62,0.624,63,0.67,64,0.661,65,0.461,66,0.461,67,0.461,68,0.461,69,0.461,70,0.461,71,0.573,72,0.573,73,0.661,74,0.461,75,0.461,76,0.573,77,0.573,78,0.412,79,0.661,80,0.626,81,0.661,82,0.399,83,0.399,84,0.461,85,0.774,86,0.399,87,0.573,88,0.67,89,0.399,90,0.461,91,0.661,92,0.661,93,0.661,94,0.661,95,0.461,96,0.399,97,0.461,98,0.573,99,0.461,100,0.461,101,0.461,102,0.774,103,0.461,104,0.399,105,0.633,106,0.774,107,0.732,108,0.774,109,0.774,110,0.774,111,0.774,112,0.774,113,0.774,114,0.573,115,0.461,116,0.461,117,0.461,118,0.461,119,0.461,120,0.461,121,0.399,122,0.399,123,0.482,124,0.573,125,0.661,126,0.661,127,0.661,128,0.774,129,0.661,130,0.661,131,0.49,132,0.67,133,0.461,134,0.461,135,0.461,136,0.573,137,0.661,138,0.461,139,0.461,140,0.461,141,0.032,142,0.573,143,0.287,144,0.573,145,0.67,146,0.341,147,0.399,148,0.399,149,0.399,150,0.461,151,0.461,152,0.461,153,0.461,154,0.573,155,0.774,156,0.711,157,0.461,158,0.399,159,0.461,160,0.399,161,0.399,162,0.399,163,0.027,164,0.678]],["title/interfaces/Sections.html",[0,0.158,46,0.347]],["body/interfaces/Sections.html",[0,0.3,1,0.244,2,0.412,3,0.412,4,0.412,5,0.352,6,0.244,7,0.147,8,0.352,9,0.352,10,0.491,11,0.352,12,0.816,13,0.524,14,0.048,15,0.946,16,0.786,17,0.785,18,0.422,19,0.677,20,0.677,21,0.677,22,0.677,23,0.586,24,0.788,25,0.788,26,0.682,27,0.476,28,0.586,29,0.636,30,0.476,31,0.682,32,0.476,33,0.785,34,0.743,35,0.586,36,0.412,37,0.412,38,0.636,39,0.371,40,0.412,41,0.618,42,0.412,43,0.586,44,0.858,45,0.747,46,0.535,47,0.637,48,0.412,49,0.584,50,0.412,51,0.677,52,0.491,53,0.636,54,0.501,55,0.352,56,0.412,57,0.682,58,0.586,59,0.423,60,0.788,61,0.476,62,0.628,63,0.682,64,0.677,65,0.476,66,0.476,67,0.476,68,0.476,69,0.476,70,0.476,71,0.586,72,0.586,73,0.677,74,0.476,75,0.476,76,0.586,77,0.586,78,0.422,79,0.677,80,0.636,81,0.677,82,0.412,83,0.412,84,0.476,85,0.788,86,0.412,87,0.586,88,0.682,89,0.412,90,0.476,91,0.677,92,0.677,93,0.677,94,0.677,95,0.476,96,0.412,97,0.476,98,0.586,99,0.476,100,0.476,101,0.476,102,0.788,103,0.476,104,0.412,105,0.637,106,0.788,107,0.743,108,0.788,109,0.788,110,0.788,111,0.788,112,0.788,113,0.788,114,0.584,115,0.476,116,0.476,117,0.476,118,0.476,119,0.476,120,0.476,121,0.412,122,0.412,123,0.491,124,0.586,125,0.677,126,0.677,127,0.677,128,0.788,129,0.677,130,0.677,131,0.501,132,0.682,133,0.476,134,0.476,135,0.476,136,0.586,137,0.677,138,0.476,139,0.476,140,0.476,141,0.032,142,0.586,143,0.297,144,0.586,145,0.682,146,0.352,147,0.412,148,0.412,149,0.412,150,0.476,151,0.476,152,0.476,153,0.476,154,0.586,155,0.788,156,0.352,157,0.476,158,0.412,159,0.476,160,0.412,161,0.412,162,0.412,163,0.028]],["title/interfaces/Validations.html",[0,0.158,105,0.347]],["body/interfaces/Validations.html",[0,0.297,1,0.232,2,0.391,3,0.391,4,0.391,5,0.334,6,0.232,7,0.14,8,0.334,9,0.334,10,0.477,11,0.334,12,0.802,13,0.552,14,0.048,15,0.949,16,0.779,17,0.769,18,0.406,19,0.652,20,0.652,21,0.652,22,0.652,23,0.564,24,0.765,25,0.765,26,0.662,27,0.451,28,0.564,29,0.621,30,0.451,31,0.662,32,0.451,33,0.769,34,0.725,35,0.564,36,0.391,37,0.391,38,0.621,39,0.363,40,0.391,41,0.609,42,0.391,43,0.564,44,0.926,45,0.737,46,0.477,47,0.554,48,0.391,49,0.567,50,0.391,51,0.652,52,0.477,53,0.621,54,0.483,55,0.334,56,0.391,57,0.662,58,0.564,59,0.423,60,0.838,61,0.451,62,0.621,63,0.662,64,0.652,65,0.451,66,0.451,67,0.451,68,0.451,69,0.451,70,0.451,71,0.564,72,0.564,73,0.652,74,0.451,75,0.451,76,0.564,77,0.564,78,0.406,79,0.652,80,0.658,81,0.652,82,0.391,83,0.391,84,0.451,85,0.765,86,0.391,87,0.564,88,0.662,89,0.391,90,0.451,91,0.652,92,0.652,93,0.652,94,0.652,95,0.451,96,0.391,97,0.451,98,0.564,99,0.451,100,0.451,101,0.451,102,0.838,103,0.451,104,0.391,105,0.664,106,0.838,107,0.802,108,0.838,109,0.838,110,0.838,111,0.838,112,0.838,113,0.838,114,0.567,115,0.451,116,0.451,117,0.451,118,0.451,119,0.652,120,0.652,121,0.564,122,0.564,123,0.63,124,0.662,125,0.765,126,0.765,127,0.765,128,0.838,129,0.765,130,0.765,131,0.686,132,0.725,133,0.451,134,0.451,135,0.451,136,0.564,137,0.652,138,0.451,139,0.451,140,0.451,141,0.032,142,0.564,143,0.281,144,0.564,145,0.662,146,0.334,147,0.391,148,0.391,149,0.391,150,0.451,151,0.451,152,0.451,153,0.451,154,0.564,155,0.765,156,0.707,157,0.451,158,0.391,159,0.451,160,0.391,161,0.391,162,0.391,163,0.027,164,0.664]],["title/coverage.html",[245,3.142]],["body/coverage.html",[0,0.317,1,0.361,5,0.521,6,0.58,7,0.352,8,0.826,13,0.361,14,0.047,18,0.438,39,0.287,41,0.438,45,0.521,46,0.438,47,0.438,49,0.521,52,0.438,59,0.287,62,0.438,105,0.438,114,0.744,123,0.438,141,0.036,143,0.438,163,0.036,180,2.485,184,3.661,212,2.929,228,2.929,245,2.929,246,3.603,247,3.603,248,3.603,249,3.994,250,3.994,251,2.929,252,5.484,253,5.148,254,2.485,255,3.603,256,3.994,257,4.914,258,4.504,259,3.603,260,3.603,261,3.603,262,3.603,263,4.504,264,4.504,265,3.603,266,3.603,267,3.603,268,3.603,269,3.603,270,2.485,271,3.603,272,3.603,273,3.603,274,3.603,275,3.603,276,3.603,277,3.603,278,3.603]],["title/dependencies.html",[171,2.044,279,1.649]],["body/dependencies.html",[7,0.298,14,0.047,39,0.334,59,0.334,141,0.04,163,0.04,171,2.5,210,3.401,215,3.401,223,3.401,225,3.401,227,3.401,280,4.184,281,5.696,282,4.184,283,4.184,284,4.184,285,4.184,286,4.184,287,4.184,288,4.184,289,4.932,290,4.009,291,4.184,292,4.184,293,4.184,294,4.184,295,4.184,296,4.184,297,4.184,298,4.184,299,4.184,300,4.184]],["title/miscellaneous/functions.html",[78,0.416,301,1.429]],["body/miscellaneous/functions.html",[6,0.435,7,0.263,9,0.629,14,0.045,78,0.529,141,0.041,143,0.648,163,0.041,199,4.332,249,3.536,250,4.458,251,4.332,254,3.675,301,2.599,302,5.33,303,5.33]],["title/index.html",[9,0.346,304,2.391,305,2.391]],["body/index.html",[1,0.182,7,0.169,10,0.464,11,0.654,12,0.88,13,0.497,14,0.048,15,0.472,16,0.404,23,0.472,26,0.308,28,0.472,29,0.491,31,0.472,33,0.788,34,0.574,35,0.574,36,0.308,37,0.308,38,0.706,39,0.381,40,0.308,41,0.669,42,0.308,43,0.764,46,0.34,47,0.464,48,0.472,50,0.574,52,0.34,53,0.404,54,0.263,55,0.404,58,0.472,59,0.223,62,0.5,63,0.308,71,0.472,72,0.764,76,0.472,77,0.788,78,0.464,80,0.674,82,0.308,83,0.472,86,0.308,87,0.308,88,0.472,89,0.472,96,0.764,98,0.644,104,0.308,105,0.568,107,0.308,121,0.308,122,0.308,123,0.34,124,0.472,131,0.759,132,0.852,136,0.734,141,0.022,142,0.734,143,0.34,144,0.825,145,0.9,146,0.551,147,0.472,148,0.734,149,0.644,154,0.788,156,0.404,158,0.308,160,0.734,161,0.734,162,0.734,163,0.022,168,1.669,169,1.782,188,1.479,193,1.479,198,1.479,208,3.1,211,3.1,237,1.479,254,1.926,256,2.271,270,1.255,279,1.926,306,1.82,307,1.82,308,2.793,309,1.82,310,1.82,311,1.82,312,1.479,313,1.82,314,1.82,315,2.793,316,5.04,317,1.82,318,3.813,319,3.813,320,1.82,321,1.82,322,1.82,323,1.82,324,1.82,325,3.4,326,1.82,327,1.82,328,3.4,329,1.82,330,1.82,331,1.82,332,1.82,333,1.82,334,4.521,335,1.82,336,1.82,337,1.82,338,1.82,339,1.82,340,1.82,341,1.82,342,2.793,343,2.793,344,1.82,345,1.82,346,1.82,347,1.82,348,1.82,349,1.82,350,1.82,351,3.4,352,1.82,353,1.82,354,1.82,355,1.82,356,1.82,357,1.82,358,1.82,359,2.793,360,1.82,361,3.813,362,1.82,363,2.793,364,2.793,365,2.793,366,1.82,367,1.82,368,1.82,369,1.82,370,1.82,371,1.82,372,1.82,373,1.82,374,1.82,375,1.82,376,1.82,377,1.82,378,1.82,379,1.82,380,1.82,381,3.4,382,3.4,383,4.114,384,1.82,385,1.82,386,1.82,387,1.82,388,1.82,389,1.82,390,4.342,391,2.793,392,2.793,393,2.793,394,2.793,395,5.326,396,2.793,397,2.793,398,3.813,399,2.793,400,2.793,401,2.793,402,2.793,403,2.793,404,2.793,405,3.813,406,3.813,407,2.793,408,2.793,409,4.342,410,3.813,411,2.793,412,2.793,413,2.793,414,2.793,415,2.793,416,3.4,417,1.82,418,1.82,419,1.82,420,1.82,421,1.82,422,1.82,423,1.82,424,1.82,425,1.82,426,1.82,427,1.82,428,1.82,429,1.82,430,4.114,431,1.82,432,2.793,433,1.82,434,1.82,435,1.82,436,1.82,437,1.82,438,1.82,439,1.82,440,2.793,441,1.82,442,1.82,443,1.82,444,1.82,445,1.82,446,1.82]],["title/modules.html",[170,2.665]],["body/modules.html",[14,0.042,141,0.042,163,0.042,169,2.373,170,3.123,290,3.681,312,3.681,447,4.529,448,4.529]],["title/overview.html",[449,3.142]],["body/overview.html",[2,0.728,14,0.044,59,0.344,141,0.04,146,0.767,163,0.04,168,2.999,169,2.918,171,2.575,172,3.503,173,3.503,174,3.503,175,3.503,176,3.503,177,3.503,178,3.503,179,3.503,180,3.921,181,4.079,182,3.503,183,3.503,270,2.972,449,3.503,450,4.309]],["title/properties.html",[10,0.416,279,1.649]],["body/properties.html",[10,0.553,14,0.044,57,0.768,141,0.042,163,0.042,451,4.544]],["title/miscellaneous/typealiases.html",[301,1.429,452,3.42]],["body/miscellaneous/typealiases.html",[6,0.444,7,0.268,8,0.641,9,0.641,13,0.444,14,0.044,17,0.862,18,0.539,53,0.737,54,0.641,55,0.641,56,0.749,141,0.041,163,0.041,301,2.65,453,4.434,454,5.102]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":252,"title":{},"body":{"coverage.html":{}}}],["0.11.4",{"_index":300,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":253,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":258,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":255,"title":{},"body":{"coverage.html":{}}}],["0em",{"_index":410,"title":{},"body":{"index.html":{}}}],["1",{"_index":146,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{},"overview.html":{}}}],["1.0.0",{"_index":451,"title":{},"body":{"properties.html":{}}}],["1/11",{"_index":266,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":260,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":268,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":257,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":262,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":264,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":395,"title":{},"body":{"index.html":{}}}],["11/39",{"_index":275,"title":{},"body":{"coverage.html":{}}}],["13",{"_index":450,"title":{},"body":{"overview.html":{}}}],["13.0.0",{"_index":285,"title":{},"body":{"dependencies.html":{}}}],["13.3.0",{"_index":283,"title":{},"body":{"dependencies.html":{}}}],["13.3.12",{"_index":281,"title":{},"body":{"dependencies.html":{}}}],["13.3.9",{"_index":288,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":263,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":261,"title":{},"body":{"coverage.html":{}}}],["16/30",{"_index":272,"title":{},"body":{"coverage.html":{}}}],["1em",{"_index":409,"title":{},"body":{"index.html":{}}}],["2",{"_index":402,"title":{},"body":{"index.html":{}}}],["2.2.0",{"_index":298,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":256,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["25",{"_index":267,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":274,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":403,"title":{},"body":{"index.html":{}}}],["30",{"_index":398,"title":{},"body":{"index.html":{}}}],["33",{"_index":259,"title":{},"body":{"coverage.html":{}}}],["4.17.21",{"_index":293,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":399,"title":{},"body":{"index.html":{}}}],["53",{"_index":271,"title":{},"body":{"coverage.html":{}}}],["6.6.0",{"_index":296,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":147,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["8.0.0",{"_index":294,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":265,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":351,"title":{},"body":{"index.html":{}}}],["accepts",{"_index":315,"title":{},"body":{"index.html":{}}}],["accordingly",{"_index":426,"title":{},"body":{"index.html":{}}}],["accurate",{"_index":110,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["actual",{"_index":355,"title":{},"body":{"index.html":{}}}],["add",{"_index":334,"title":{},"body":{"index.html":{}}}],["added",{"_index":125,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["aliases",{"_index":453,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular",{"_index":120,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["angular/animations",{"_index":280,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":282,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/overlay",{"_index":232,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["angular/common",{"_index":225,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":284,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":210,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"dependencies.html":{}}}],["angular/flex",{"_index":227,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":223,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":287,"title":{},"body":{"dependencies.html":{}}}],["angular/material/dialog",{"_index":234,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["angular/material/expansion",{"_index":218,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["angular/material/input",{"_index":220,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["angular/material/select",{"_index":236,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["angular/platform",{"_index":289,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":291,"title":{},"body":{"dependencies.html":{}}}],["anything",{"_index":432,"title":{},"body":{"index.html":{}}}],["app",{"_index":439,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":443,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":444,"title":{},"body":{"index.html":{}}}],["appcomponents",{"_index":375,"title":{},"body":{"index.html":{}}}],["application's",{"_index":112,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["applications",{"_index":346,"title":{},"body":{"index.html":{}}}],["arguments",{"_index":155,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["array",{"_index":89,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["based",{"_index":102,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["beta.38",{"_index":286,"title":{},"body":{"dependencies.html":{}}}],["binding",{"_index":388,"title":{},"body":{"index.html":{}}}],["blur",{"_index":55,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["boolean",{"_index":44,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["bootstrap",{"_index":174,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["browse",{"_index":448,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":290,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["button",{"_index":340,"title":{},"body":{"index.html":{}}}],["callback",{"_index":430,"title":{},"body":{"index.html":{}}}],["card",{"_index":23,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["case",{"_index":328,"title":{},"body":{"index.html":{}}}],["case.personaldetails.name",{"_index":75,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["certain",{"_index":126,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["change",{"_index":54,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["changedetection",{"_index":382,"title":{},"body":{"index.html":{}}}],["changedetection($event)\";example",{"_index":437,"title":{},"body":{"index.html":{}}}],["changedetection(event",{"_index":436,"title":{},"body":{"index.html":{}}}],["checkboxcomponent",{"_index":363,"title":{},"body":{"index.html":{}}}],["checkon",{"_index":338,"title":{},"body":{"index.html":{}}}],["class",{"_index":38,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["classes",{"_index":421,"title":{},"body":{"index.html":{}}}],["classname",{"_index":349,"title":{},"body":{"index.html":{}}}],["click",{"_index":339,"title":{},"body":{"index.html":{}}}],["client_details",{"_index":413,"title":{},"body":{"index.html":{}}}],["client_details.dateofissue",{"_index":404,"title":{},"body":{"index.html":{}}}],["client_details.idno",{"_index":149,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["client_details.idtype",{"_index":145,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["cluster_ndynamicrenderermodule",{"_index":177,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["cluster_ndynamicrenderermodule_declarations",{"_index":178,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["cluster_ndynamicrenderermodule_exports",{"_index":179,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["code",{"_index":379,"title":{},"body":{"index.html":{}}}],["common",{"_index":419,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":224,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["compoent",{"_index":129,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["component",{"_index":59,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["component's",{"_index":390,"title":{},"body":{"index.html":{}}}],["component_name",{"_index":58,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["componentname",{"_index":353,"title":{},"body":{"index.html":{}}}],["components",{"_index":80,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["components/dynamic/input.component",{"_index":367,"title":{},"body":{"index.html":{}}}],["components/dynamic/input1.component",{"_index":369,"title":{},"body":{"index.html":{}}}],["condition",{"_index":65,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["conditions",{"_index":127,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["config",{"_index":1,"title":{"interfaces/Config.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"index.html":{}}}],["configuration",{"_index":104,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["configuration,'library",{"_index":352,"title":{},"body":{"index.html":{}}}],["configures",{"_index":192,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["console.log(config",{"_index":378,"title":{},"body":{"index.html":{}}}],["constructor(private",{"_index":237,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["containerised",{"_index":22,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["contains",{"_index":197,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["coverage",{"_index":245,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":341,"title":{},"body":{"index.html":{}}}],["created",{"_index":380,"title":{},"body":{"index.html":{}}}],["creates",{"_index":191,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["css",{"_index":37,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["current",{"_index":128,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["current_model_path",{"_index":142,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["current_model_path:keyvalue",{"_index":153,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["custom",{"_index":122,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["cycle",{"_index":311,"title":{},"body":{"index.html":{}}}],["data",{"_index":107,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["declarations",{"_index":173,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["default",{"_index":119,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["define",{"_index":98,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["defined",{"_index":166,"title":{},"body":{"interfaces/KeyValue.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{}}}],["defines",{"_index":124,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["dependencies",{"_index":171,"title":{"dependencies.html":{}},"body":{"modules/NDynamicRendererModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":335,"title":{},"body":{"index.html":{}}}],["dependencyvalidations",{"_index":123,"title":{"interfaces/DependencyValidations.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"index.html":{}}}],["dependencyvalidations?:dependencyvalidations",{"_index":135,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["description",{"_index":164,"title":{},"body":{"interfaces/DependencyValidations.html":{},"interfaces/Function.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Validations.html":{}}}],["desides",{"_index":423,"title":{},"body":{"index.html":{}}}],["desktop",{"_index":162,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["detection",{"_index":435,"title":{},"body":{"index.html":{}}}],["determine",{"_index":92,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["different",{"_index":157,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["disabled",{"_index":91,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["disabled?:boolean",{"_index":116,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["documentation",{"_index":246,"title":{},"body":{"coverage.html":{}}}],["download",{"_index":327,"title":{},"body":{"index.html":{}}}],["dropdown",{"_index":90,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["dropdowncomponent",{"_index":407,"title":{},"body":{"index.html":{}}}],["during",{"_index":81,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["dynamic",{"_index":7,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["dynamically",{"_index":314,"title":{},"body":{"index.html":{}}}],["dynamiciomodule",{"_index":216,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["dynamicmodule",{"_index":214,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["dynamicrendererservice",{"_index":370,"title":{},"body":{"index.html":{}}}],["each",{"_index":19,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["eg",{"_index":74,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["ensure",{"_index":106,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["enter",{"_index":336,"title":{},"body":{"index.html":{}}}],["entered",{"_index":108,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["eq",{"_index":144,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["error",{"_index":428,"title":{},"body":{"index.html":{}}}],["event",{"_index":82,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["example",{"_index":130,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["expanded",{"_index":31,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["expansion",{"_index":21,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["expansional",{"_index":32,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["export",{"_index":16,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["exports",{"_index":176,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["expression",{"_index":64,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["false",{"_index":396,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{}}}],["flex",{"_index":41,"title":{"interfaces/Flex.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"index.html":{}}}],["flexlayoutmodule",{"_index":226,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["follow",{"_index":384,"title":{},"body":{"index.html":{}}}],["following",{"_index":319,"title":{},"body":{"index.html":{}}}],["follows",{"_index":138,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["formcontrol",{"_index":70,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["formcontroller",{"_index":85,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["formsmodule",{"_index":221,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["forroot",{"_index":188,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["forroot(config",{"_index":189,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["full",{"_index":309,"title":{},"body":{"index.html":{}}}],["function",{"_index":114,"title":{"interfaces/Function.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{}}}],["functionname",{"_index":154,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["functions",{"_index":78,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["generated",{"_index":86,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["generates",{"_index":317,"title":{},"body":{"index.html":{}}}],["getting",{"_index":304,"title":{"index.html":{}},"body":{}}],["handling",{"_index":429,"title":{},"body":{"index.html":{}}}],["header",{"_index":30,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["homepagecomponent",{"_index":364,"title":{},"body":{"index.html":{}}}],["https://example.com/object1666938433.json",{"_index":445,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":206,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["icon",{"_index":391,"title":{},"body":{"index.html":{}}}],["id",{"_index":50,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["identifier",{"_index":247,"title":{},"body":{"coverage.html":{}}}],["idnobirthcervalidator",{"_index":251,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["idnolengthcheckvalidator",{"_index":143,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["idtype1validation",{"_index":406,"title":{},"body":{"index.html":{}}}],["import",{"_index":208,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["imports",{"_index":11,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexable",{"_index":165,"title":{},"body":{"interfaces/KeyValue.html":{},"interfaces/Options.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["initialization",{"_index":84,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["initialize_functions",{"_index":83,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["initialize_functions?:function",{"_index":115,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["injectable",{"_index":270,"title":{},"body":{"coverage.html":{},"index.html":{},"overview.html":{}}}],["input1component",{"_index":368,"title":{},"body":{"index.html":{}}}],["inputclasscomponent",{"_index":350,"title":{},"body":{"index.html":{}}}],["inputclasscomponent1",{"_index":361,"title":{},"body":{"index.html":{}}}],["inputcomponent",{"_index":366,"title":{},"body":{"index.html":{}}}],["inputs",{"_index":63,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["install",{"_index":324,"title":{},"body":{"index.html":{}}}],["installation",{"_index":322,"title":{},"body":{"index.html":{}}}],["installed",{"_index":345,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"overview.html":{}}}],["interfaces/interface",{"_index":230,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["it's",{"_index":354,"title":{},"body":{"index.html":{}}}],["item",{"_index":20,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["key",{"_index":34,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["keyvalue",{"_index":45,"title":{"interfaces/KeyValue.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{}}}],["label",{"_index":88,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["layout",{"_index":39,"title":{"interfaces/Layout.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["leaf",{"_index":49,"title":{"interfaces/Leaf.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{}}}],["leafs",{"_index":48,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["legacy",{"_index":342,"title":{},"body":{"index.html":{}}}],["legend",{"_index":172,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["level",{"_index":26,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["libraries",{"_index":193,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["library",{"_index":12,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["library1",{"_index":360,"title":{},"body":{"index.html":{}}}],["library2",{"_index":362,"title":{},"body":{"index.html":{}}}],["libraryname",{"_index":198,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["life",{"_index":310,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":292,"title":{},"body":{"dependencies.html":{}}}],["look",{"_index":320,"title":{},"body":{"index.html":{}}}],["manage",{"_index":332,"title":{},"body":{"index.html":{}}}],["manager",{"_index":329,"title":{},"body":{"index.html":{}}}],["manulife",{"_index":400,"title":{},"body":{"index.html":{}}}],["many",{"_index":357,"title":{},"body":{"index.html":{}}}],["margin",{"_index":408,"title":{},"body":{"index.html":{}}}],["matching",{"_index":163,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["matdialogmodule",{"_index":233,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["matexpansionmodule",{"_index":217,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["matinputmodule",{"_index":219,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["matselectmodule",{"_index":235,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["maxlength",{"_index":401,"title":{},"body":{"index.html":{}}}],["meets",{"_index":111,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["metadata",{"_index":52,"title":{"interfaces/Metadata.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"index.html":{}}}],["methods",{"_index":186,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["miscellaneous",{"_index":301,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mobile",{"_index":160,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["mobile,tablet,desktop",{"_index":42,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["model",{"_index":72,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["model_path",{"_index":71,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["modifyvalidations",{"_index":405,"title":{},"body":{"index.html":{}}}],["module",{"_index":168,"title":{"modules/NDynamicRendererModule.html":{}},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":170,"title":{"modules.html":{}},"body":{"modules/NDynamicRendererModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":200,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["mongodb",{"_index":139,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["n",{"_index":211,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["name",{"_index":29,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["name,version,angular",{"_index":337,"title":{},"body":{"index.html":{}}}],["ncomponentmodules",{"_index":372,"title":{},"body":{"index.html":{}}}],["ncomponents",{"_index":365,"title":{},"body":{"index.html":{}}}],["ndynamicrenderer",{"_index":306,"title":{},"body":{"index.html":{}}}],["ndynamicrenderercomponent",{"_index":180,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"coverage.html":{},"overview.html":{}}}],["ndynamicrenderermodule",{"_index":169,"title":{"modules/NDynamicRendererModule.html":{}},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["ndynamicrendererservice",{"_index":228,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"coverage.html":{}}}],["needs",{"_index":60,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["neutrinos",{"_index":359,"title":{},"body":{"index.html":{}}}],["new",{"_index":276,"title":{},"body":{"coverage.html":{}}}],["ng",{"_index":215,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"dependencies.html":{}}}],["ngmodule",{"_index":209,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["nm",{"_index":397,"title":{},"body":{"index.html":{}}}],["nospecialcharactersvalidator",{"_index":254,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["npm",{"_index":323,"title":{},"body":{"index.html":{}}}],["number",{"_index":51,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["object",{"_index":77,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["objects",{"_index":358,"title":{},"body":{"index.html":{}}}],["onerror",{"_index":381,"title":{},"body":{"index.html":{}}}],["onerror($event)\";changedetection",{"_index":433,"title":{},"body":{"index.html":{}}}],["onerror(error",{"_index":431,"title":{},"body":{"index.html":{}}}],["open",{"_index":331,"title":{},"body":{"index.html":{}}}],["optional",{"_index":156,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["options",{"_index":62,"title":{"interfaces/Options.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"index.html":{}}}],["out",{"_index":183,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["output_events",{"_index":76,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["outputs",{"_index":313,"title":{},"body":{"index.html":{}}}],["overlaymodule",{"_index":231,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["overview",{"_index":449,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":415,"title":{},"body":{"index.html":{}}}],["p3",{"_index":394,"title":{},"body":{"index.html":{}}}],["package",{"_index":279,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["padding",{"_index":411,"title":{},"body":{"index.html":{}}}],["pair",{"_index":36,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["pairs",{"_index":420,"title":{},"body":{"index.html":{}}}],["panel",{"_index":17,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"miscellaneous/typealiases.html":{}}}],["panel_name",{"_index":28,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["panels",{"_index":18,"title":{"interfaces/Panels.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["param",{"_index":238,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["parameters",{"_index":195,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["parse",{"_index":99,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["pass",{"_index":344,"title":{},"body":{"index.html":{}}}],["passed",{"_index":87,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["path",{"_index":73,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["pb2",{"_index":392,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":333,"title":{},"body":{"index.html":{}}}],["policy",{"_index":414,"title":{},"body":{"index.html":{}}}],["pr",{"_index":393,"title":{},"body":{"index.html":{}}}],["prepare",{"_index":356,"title":{},"body":{"index.html":{}}}],["preparing",{"_index":347,"title":{},"body":{"index.html":{}}}],["present",{"_index":422,"title":{},"body":{"index.html":{}}}],["projects/.../custom",{"_index":302,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../interface.ts",{"_index":454,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/n",{"_index":6,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{},"properties.html":{}}}],["property",{"_index":383,"title":{},"body":{"index.html":{}}}],["provide",{"_index":240,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["provided",{"_index":194,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["providers",{"_index":175,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["public",{"_index":201,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["pulled",{"_index":95,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["query",{"_index":137,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["reactiveformsmodule",{"_index":222,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["readonly",{"_index":94,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["readonly?:boolean",{"_index":117,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["render",{"_index":389,"title":{},"body":{"index.html":{}}}],["renderer",{"_index":325,"title":{},"body":{"index.html":{}}}],["renderer.component",{"_index":213,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["renderer.component.ts",{"_index":273,"title":{},"body":{"coverage.html":{}}}],["renderer.module.ts",{"_index":185,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["renderer.module.ts:39",{"_index":190,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["renderer.module.ts:58",{"_index":204,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["renderer.service",{"_index":229,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["renderer.service.ts",{"_index":269,"title":{},"body":{"coverage.html":{}}}],["renderer/n",{"_index":212,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"coverage.html":{}}}],["renderer/src/lib/custom",{"_index":249,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["renderer/src/lib/interfaces/interface.ts",{"_index":8,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["renderer/src/lib/interfaces/interface.ts:21",{"_index":167,"title":{},"body":{"interfaces/KeyValue.html":{}}}],["renderer/src/lib/interfaces/interface.ts:97",{"_index":244,"title":{},"body":{"interfaces/Options.html":{}}}],["renderer/src/lib/n",{"_index":184,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"coverage.html":{}}}],["renderered",{"_index":61,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["rendererimports",{"_index":371,"title":{},"body":{"index.html":{}}}],["rendering",{"_index":307,"title":{},"body":{"index.html":{}}}],["required",{"_index":131,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["required?:boolean",{"_index":134,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["required_value",{"_index":136,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["required_value:keyvalue",{"_index":151,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["requirements",{"_index":113,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["reset",{"_index":182,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["resetconfig",{"_index":202,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["resetconfig(config",{"_index":203,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["resetrenderercomponents",{"_index":374,"title":{},"body":{"index.html":{}}}],["resets",{"_index":205,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["resolutions.set",{"_index":425,"title":{},"body":{"index.html":{}}}],["respective",{"_index":308,"title":{},"body":{"index.html":{}}}],["responsive",{"_index":40,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["results",{"_index":141,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":239,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["returns",{"_index":199,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":440,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":295,"title":{},"body":{"dependencies.html":{}}}],["schema",{"_index":96,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["schema\";onerror",{"_index":427,"title":{},"body":{"index.html":{}}}],["schema.supports",{"_index":385,"title":{},"body":{"index.html":{}}}],["screen",{"_index":158,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["section",{"_index":47,"title":{"interfaces/Section.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"index.html":{}}}],["section_name",{"_index":412,"title":{},"body":{"index.html":{}}}],["sections",{"_index":46,"title":{"interfaces/Sections.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"index.html":{}}}],["selector",{"_index":438,"title":{},"body":{"index.html":{}}}],["service",{"_index":343,"title":{},"body":{"index.html":{}}}],["set",{"_index":25,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["sets",{"_index":66,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["show",{"_index":67,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["sizes",{"_index":159,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["someother",{"_index":101,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["started",{"_index":305,"title":{"index.html":{}},"body":{}}],["statements",{"_index":248,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":187,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["story",{"_index":330,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":69,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["string",{"_index":15,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["structure",{"_index":348,"title":{},"body":{"index.html":{}}}],["structured",{"_index":321,"title":{},"body":{"index.html":{}}}],["styles",{"_index":33,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["styles','layout",{"_index":418,"title":{},"body":{"index.html":{}}}],["styles,layout",{"_index":24,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["styleurls",{"_index":442,"title":{},"body":{"index.html":{}}}],["submit",{"_index":56,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"miscellaneous/typealiases.html":{}}}],["support",{"_index":312,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":447,"title":{},"body":{"modules.html":{}}}],["syntax",{"_index":140,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["table",{"_index":278,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":277,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":161,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["takes",{"_index":100,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["target_model_path",{"_index":148,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["target_model_path:keyvalue",{"_index":152,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["template",{"_index":416,"title":{},"body":{"index.html":{}}}],["templateurl",{"_index":441,"title":{},"body":{"index.html":{}}}],["text",{"_index":27,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["this.ncomponentmodules",{"_index":376,"title":{},"body":{"index.html":{}}}],["this.ncomponentmodules={...inputcomponent,...input1component",{"_index":373,"title":{},"body":{"index.html":{}}}],["this.ndynamicrenderermodule.resetconfig(config",{"_index":377,"title":{},"body":{"index.html":{}}}],["this.ndynamicrendererservice.config",{"_index":242,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["this.ndynamicrendererservice.resetconfig",{"_index":243,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["title",{"_index":446,"title":{},"body":{"index.html":{}}}],["triggered",{"_index":79,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["triggers",{"_index":434,"title":{},"body":{"index.html":{}}}],["true",{"_index":132,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["tslib",{"_index":297,"title":{},"body":{"dependencies.html":{}}}],["tv",{"_index":43,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["two",{"_index":386,"title":{},"body":{"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type?:string",{"_index":133,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["typealiases",{"_index":452,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["ui",{"_index":318,"title":{},"body":{"index.html":{}}}],["update",{"_index":68,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["updateon",{"_index":53,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["usage",{"_index":326,"title":{},"body":{"index.html":{}}}],["used",{"_index":97,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["user",{"_index":103,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["users",{"_index":109,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["usevalue",{"_index":241,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["validations",{"_index":105,"title":{"interfaces/Validations.html":{}},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"coverage.html":{},"index.html":{}}}],["validations.service.ts",{"_index":250,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["validations:keyvalue",{"_index":150,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["validations?:keyvalue",{"_index":118,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["validatorfn",{"_index":303,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":35,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["version",{"_index":57,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"properties.html":{}}}],["view",{"_index":316,"title":{},"body":{"index.html":{}}}],["view\";every",{"_index":417,"title":{},"body":{"index.html":{}}}],["void",{"_index":207,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["way",{"_index":387,"title":{},"body":{"index.html":{}}}],["well",{"_index":121,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{},"index.html":{}}}],["whether",{"_index":93,"title":{},"body":{"interfaces/Config.html":{},"interfaces/DependencyValidations.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"interfaces/Validations.html":{}}}],["width",{"_index":424,"title":{},"body":{"index.html":{}}}],["yes",{"_index":196,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["zone.js",{"_index":299,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":181,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            imports\n                                        \n                                \n                                \n                                        \n                                            library\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        imports\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imports:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        library\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        library:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DependencyValidations.html":{"url":"interfaces/DependencyValidations.html","title":"interface - DependencyValidations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DependencyValidations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\nvalidations - To ensure that the data entered by users is accurate and meets our application's requirements.\nrequired_value - This is a query which follows mongoDB query syntax which results a boolean.\ncurrent_model_path - Model path of the current component.\nExample -\n{\n\"validations\": {\n\"required\": true,\n\"idNoLengthCheckValidator\": true\n},\n\"required_value\": {\n\"$or\": [\n{\n\"$eq\": [\"@client_details.idType\", \"1\"]\n},\n{\n\"$eq\": [\"@client_details.idType\", \"7\"]\n}\n]\n},\n\"target_model_path\": \"@client_details.idNo\",\n\"current_model_path\": \"@client_details.idType\"\n}\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            current_model_path\n                                        \n                                \n                                \n                                        \n                                            required_value\n                                        \n                                \n                                \n                                        \n                                            target_model_path\n                                        \n                                \n                                \n                                        \n                                            validations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        current_model_path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        current_model_path:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        required_value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        required_value:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target_model_path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target_model_path:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validations:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Flex.html":{"url":"interfaces/Flex.html","title":"interface - Flex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Flex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Function.html":{"url":"interfaces/Function.html","title":"interface - Function","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Function\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                functionName - Name of the function.\nArguments - Which are optional are passed as arguments.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            arguments\n                                        \n                                \n                                \n                                        \n                                            functionName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        arguments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        arguments:     number[] | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[] | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        functionName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        functionName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/KeyValue.html":{"url":"interfaces/KeyValue.html","title":"interface - KeyValue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  KeyValue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in projects/n-dynamic-renderer/src/lib/interfaces/interface.ts:21\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Layout.html":{"url":"interfaces/Layout.html","title":"interface - Layout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Layout\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Define flex for different screen sizes\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            desktop\n                                        \n                                \n                                \n                                        \n                                            mobile\n                                        \n                                \n                                \n                                        \n                                            tablet\n                                        \n                                \n                                \n                                        \n                                            tv\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        desktop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        desktop:         Flex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Flex\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mobile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mobile:         Flex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Flex\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tablet\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tablet:         Flex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Flex\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tv\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tv:         Flex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Flex\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Leaf.html":{"url":"interfaces/Leaf.html","title":"interface - Leaf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Leaf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                 styles,layout can be set on the Leaf level too.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            class\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            layout\n                                        \n                                \n                                \n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        layout:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         Metadata\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Metadata\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metadata.html":{"url":"interfaces/Metadata.html","title":"interface - Metadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Metadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                version- Version of the library.\nlibrary- Name of the library.\ncomponent_name - Name of the component that needs to be renderered.\noptions- The options are the inputs to the component.\nexpression - The condition that sets to show the component.\nupdateOn - The update strategy on the formControl\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component_name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expression\n                                        \n                                \n                                \n                                        \n                                            library\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            updateOn\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expression\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expression:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        library\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        library:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         Options\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Options\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateOn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateOn:         updateOn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         updateOn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NDynamicRendererModule.html":{"url":"modules/NDynamicRendererModule.html","title":"module - NDynamicRendererModule","body":"\n                   \n\n\n\n\n    Modules\n    NDynamicRendererModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NDynamicRendererModule\n\n\n\ncluster_NDynamicRendererModule_declarations\n\n\n\ncluster_NDynamicRendererModule_exports\n\n\n\n\nNDynamicRendererComponent\n\nNDynamicRendererComponent\n\n\n\nNDynamicRendererModule\n\nNDynamicRendererModule\n\nNDynamicRendererModule -->\n\nNDynamicRendererComponent->NDynamicRendererModule\n\n\n\n\n\nNDynamicRendererComponent \n\nNDynamicRendererComponent \n\nNDynamicRendererComponent  -->\n\nNDynamicRendererModule->NDynamicRendererComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/n-dynamic-renderer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NDynamicRendererComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NDynamicRendererComponent\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config?: Config[])\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer.module.ts:39\n                \n            \n\n\n            \n                \n                    Creates and configures a module with all the required libraries and their components provided.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                Config[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe config which contains the libraryName and its imports.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resetConfig\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetConfig(config: Config[])\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer.module.ts:58\n                \n            \n\n\n            \n                \n                    Resets the config i.e., the imports modules.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                Config[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NDynamicRendererComponent } from './n-dynamic-renderer/n-dynamic-renderer.component';\nimport { DynamicModule } from 'ng-dynamic-component';\nimport { DynamicIoModule  } from 'ng-dynamic-component';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatInputModule } from '@angular/material/input';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NDynamicRendererService } from './n-dynamic-renderer.service';\nimport { Config } from './interfaces/interface';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport { MatSelectModule } from '@angular/material/select';\n\n@NgModule({\n  declarations: [NDynamicRendererComponent],\n  imports: [\n    MatExpansionModule,\n    DynamicModule,\n    MatInputModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    FlexLayoutModule,\n    OverlayModule,\n    MatDialogModule,\n    MatSelectModule ,\n    DynamicIoModule\n  ],\n  exports: [NDynamicRendererComponent],\n})\nexport class NDynamicRendererModule {\n  constructor(private NDynamicRendererService: NDynamicRendererService) {}\n  /**\n   * Creates and configures a module with all the required libraries and their components provided.\n   * @param config {Config[]}- The config which contains the libraryName and its imports.\n   */\n  static forRoot(\n    config?: Config[]\n  ): ModuleWithProviders {\n    return {\n      ngModule: NDynamicRendererModule,\n      providers: [\n        NDynamicRendererService,\n        { provide: 'config', useValue: config },\n      ],\n    };\n  }\n\n  public get config() {\n    return this.NDynamicRendererService.config;\n  }\n  /**\n   * Resets the config i.e., the imports modules.\n   * @param config\n   */\n  public resetConfig(config: Config[]) {\n    this.NDynamicRendererService.resetConfig = config;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Options.html":{"url":"interfaces/Options.html","title":"interface - Options","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Options\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Options are the inputs to the component.\nmodel_path - The model path with @ .Eg: @case.personaldetails.name\noutput_events - It is an object of functions that has to be triggered from the components during a change event\ninitialize_functions - It is an object of functions that has to be triggered from the components during initialization\nformController - This is generated by the library and is passed to the component.\nlabel - Label of the component\noptions - It is an array of options to the dropdown component\ndisabled -Boolean to determine whether the component is disabled.\nreadonly - Boolean to determine whether the component is readonly.\ntype - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n[key: string] - It takes someOther inputs based on the user configuration\nvalidations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            formController\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            initialize_functions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            model_path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            output_events\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            readonly\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            validations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in projects/n-dynamic-renderer/src/lib/interfaces/interface.ts:97\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formController\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formController:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initialize_functions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialize_functions:         Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         KeyValue[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        model_path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        model_path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        output_events\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        output_events:         Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        readonly\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        readonly:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validations:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Panels.html":{"url":"interfaces/Panels.html","title":"interface - Panels","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Panels\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\npanel_name - Name of the Expansion Panel Header.\nexpanded - Expansional Panel to be expanded or not.\nstyles- A key value pair of the CSS Styles.\nclass - string | string[]\nlayout - Responsive flex properties for mobile,tablet,desktop and tv\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            class\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expanded\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            layout\n                                        \n                                \n                                \n                                        \n                                            panel_name\n                                        \n                                \n                                \n                                        \n                                            sections\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        class:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expanded\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expanded:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        layout:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        panel_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        panel_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sections\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sections:     Sections[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Sections[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Section.html":{"url":"interfaces/Section.html","title":"interface - Section","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Section\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            class\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            layout\n                                        \n                                \n                                \n                                        \n                                            leafs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        layout:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leafs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leafs:         Leaf[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Leaf[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sections.html":{"url":"interfaces/Sections.html","title":"interface - Sections","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Sections\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            section\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        section\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        section:         Section\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Section\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Validations.html":{"url":"interfaces/Validations.html","title":"interface - Validations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Validations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\nwe have default angular validations as well as custom validations.\ntype - the data type of the component.\ndependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\nExample -\n\"validations\": {\n\"type\": \"string\",\n\"required\": true,\n\"dependencyValidations\": []\n}\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dependencyValidations\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            required\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dependencyValidations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dependencyValidations:     DependencyValidations[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DependencyValidations[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        required\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        required:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id?: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * \n * Options are the inputs to the component.\n * ```\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of functions that has to be triggered from the components during a change event\n * initialize_functions - It is an object of functions that has to be triggered from the components during initialization\n * formController - This is generated by the library and is passed to the component.\n * label - Label of the component\n * options - It is an array of options to the dropdown component\n * disabled -Boolean to determine whether the component is disabled.\n * readonly - Boolean to determine whether the component is readonly.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * [key: string] - It takes someOther inputs based on the user configuration\n * validations -  To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: Function[];\n  initialize_functions?:Function[];\n  label?: KeyValue[];\n  options?: any;\n  formController?: any;\n  type?: any;\n  disabled?:boolean;\n  readonly?:boolean;\n  [key: string]: any;\n  validations?:KeyValue;\n\n}\n\n/**\n * \n * Validations are to ensure that the data entered by users is accurate and meets our application's requirements.\n * we have default angular validations as well as custom validations.\n * ```\n * type - the data type of the component.\n * dependencyValidations - Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * Example - \n \"validations\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"dependencyValidations\": []\n }\n * ```\n */\n\nexport interface Validations{\n  type?:string;\n  required?:boolean;\n  dependencyValidations?:DependencyValidations[] \n}\n\n/**\n * Defines the validations that needs to be added on other components based on certain conditions of the current compoent.\n * validations - To ensure that the data entered by users is accurate and meets our application's requirements.\n * ```\n * required_value - This is a query which follows mongoDB query syntax which results a boolean.\n * current_model_path - Model path of the current component.\n * Example -\n    {\n    \"validations\": {\n      \"required\": true,\n      \"idNoLengthCheckValidator\": true\n    },\n    \"required_value\": {\n      \"$or\": [\n        {\n          \"$eq\": [\"@client_details.idType\", \"1\"]\n        },\n        {\n          \"$eq\": [\"@client_details.idType\", \"7\"]\n        }\n      ]\n    },\n    \"target_model_path\": \"@client_details.idNo\",\n    \"current_model_path\": \"@client_details.idType\"\n  }\n * \n * ```\n * \n */\nexport interface DependencyValidations{\n  validations:KeyValue;\n  required_value:KeyValue;\n  target_model_path:KeyValue;\n  current_model_path:KeyValue\n}\n\n/**\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/custom-validations.service.ts\n            \n            function\n            idNoBirthCerValidator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/custom-validations.service.ts\n            \n            function\n            idNoLengthCheckValidator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/custom-validations.service.ts\n            \n            function\n            noSpecialCharactersValidator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            DependencyValidations\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Flex\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Function\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            KeyValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Layout\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Leaf\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Metadata\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Options\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Panels\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Section\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Sections\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Validations\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/n-dynamic-renderer.service.ts\n            \n            injectable\n            NDynamicRendererService\n            \n                53 %\n                (16/30)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts\n            \n            component\n            NDynamicRendererComponent\n            \n                28 %\n                (11/39)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^13.3.12\n        \n            @angular/cdk : ^13.3.0\n        \n            @angular/common : ^13.3.12\n        \n            @angular/compiler : ^13.3.12\n        \n            @angular/core : ^13.3.12\n        \n            @angular/flex-layout : ^13.0.0-beta.38\n        \n            @angular/forms : ^13.3.12\n        \n            @angular/material : ^13.3.9\n        \n            @angular/platform-browser : ^13.3.12\n        \n            @angular/platform-browser-dynamic : ^13.3.12\n        \n            @angular/router : ^13.3.12\n        \n            lodash : 4.17.21\n        \n            ng-dynamic-component : ^8.0.0\n        \n            rxjs : ~6.6.0\n        \n            tslib : ^2.2.0\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            idNoBirthCerValidator   (projects/.../custom-validations.service.ts)\n                        \n                        \n                            idNoLengthCheckValidator   (projects/.../custom-validations.service.ts)\n                        \n                        \n                            noSpecialCharactersValidator   (projects/.../custom-validations.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/n-dynamic-renderer/src/lib/custom-validations.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        idNoBirthCerValidator\n                        \n                    \n                \n            \n            \n                \nidNoBirthCerValidator()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     ValidatorFn\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        idNoLengthCheckValidator\n                        \n                    \n                \n            \n            \n                \nidNoLengthCheckValidator()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     ValidatorFn\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        noSpecialCharactersValidator\n                        \n                    \n                \n            \n            \n                \nnoSpecialCharactersValidator()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     ValidatorFn\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNDynamicRenderer\nIt is a library for rendering components of the respective libraries with full life-cycle support for inputs and outputs dynamically.\nThis library accepts View and generates an UI as the following:\n\n\nLook at the 'View' how it is structured\nInstallation\n$ npm install n-dynamic-renderer\nUsage\nDownload the Case Manager UI Renderer from the story\n\n\nOpen 'Manage Plugins'->Add Dependency->Enter Package Name,Version,Angular Package, Library name, Module Name and checkon the forRoot() and click on the + button to add the module.\n\n\nCreate a legacy service \n\nPass the libraryname and its components installed in the applications by preparing the following structure:\n[\n  {\n    library: \"Custom Library\",\n    imports: {\n      className: InputClassComponent,\n    },\n  },\n];In the above configuration,'library' should be the library name .'Imports' is an object of key-value pair where key is the componentName it's value should be the actual component.\nYou can prepare as many of an array of objects of library and imports as the following\n[\n  {\n    library: \"Neutrinos Library1\",\n    imports: {\n      \"InputClassComponent1\": InputClassComponent1,\n    },\n  },\n   {\n    library: \"Neutrinos Library2\",\n    imports: {\n      \"InputClassComponent1\": InputClassComponent1,\n      \"CheckBoxComponent\": CheckBoxComponent,\n      \"HomePageComponent\": HomePageComponent\n    },\n  },\n];The above configuration can be passed to the library as the following:\n\nimport * as nComponents from 'n-components';\nimport * as inputComponent from '../../components/dynamic/input.component'\nimport * as input1Component from '../../components/dynamic/input1.component'\nimport {NDynamicRendererModule} from 'n-dynamic-renderer'\n\n@Injectable()\nexport class dynamicrendererService {\n    rendererImports;\n    nComponentModules\n    constructor(private NDynamicRendererModule: NDynamicRendererModule) {\n        this.nComponentModules={...inputComponent,...input1Component}\n    }\n    \n    resetRendererComponents() {\n        let config = [\n            {\n                library: 'n-components',\n                imports: { ...nComponents },\n            },\n            {\n                library: 'appComponents',\n                imports: {...this.nComponentModules},\n            }\n        ];\n        this.NDynamicRendererModule.resetConfig(config);\n        console.log(config)\n    }\n}\nAdd the above code in the legacy service created\n\n\nOptions\n\n[(model)]\n[view]\n[schema]\n(onError)\n(changeDetection)\n\n[model]\n\n\n\nProperty\nType\nRequired\n\n\n\n\n[(model)]\nobject\nRequired\n\n\n\nAccepts an object which should follow the Schema.Supports two way data binding as well.\n[model] = \"model\";\n[view]\n\n\n\nProperty\nType\nRequired\n\n\n\n\n[view]\nArray\nRequired\n\n\n\nView defines how the UI should render.\nDefine view in your component's class\nView = [\n   {\n      \"icon\": \"\",\n      \"class\": \"pb2 pr-p3\",\n      \"layout\": {\n        \"tv\": {\n          \"flex\": \"100\"\n        },\n        \"mobile\": {\n          \"flex\": \"100\"\n        },\n        \"tablet\": {\n          \"flex\": \"100\"\n        },\n        \"desktop\": {\n          \"flex\": \"100\"\n        }\n      },\n      \"styles\": {},\n      \"expanded\": false,\n      \"sections\": [\n        {\n          \"section\": {\n            \"class\": \"section-card-nm\",\n            \"leafs\": [\n              {\n                \"layout\": {\n                  \"tv\": {\n                    \"flex\": \"30\"\n                  },\n                  \"mobile\": {\n                    \"flex\": \"100\"\n                  },\n                  \"tablet\": {\n                    \"flex\": \"50\"\n                  },\n                  \"desktop\": {\n                    \"flex\": \"30\"\n                  }\n                },\n                \"styles\": {},\n                \"metadata\": {\n                  \"library\": \"manulife-components\",\n                  \"options\": {\n                    \"label\": \"ID Type\",\n                    \"options\": [],\n                    \"model_path\": \"@client_details.idType\",\n                    \"validations\": {\n                      \"type\": \"string\",\n                      \"required\": true,\n                      \"dependencyValidations\": [\n                        {\n                          \"validations\": {\n                            \"required\": true,\n                            \"idNoLengthCheckValidator\": true\n                          },\n                          \"required_value\": {\n                            \"$or\": [\n                              {\n                                \"$eq\": [\n                                  \"@client_details.idType\",\n                                  \"1\"\n                                ]\n                              },\n                              {\n                                \"$eq\": [\n                                  \"@client_details.idType\",\n                                  \"7\"\n                                ]\n                              }\n                            ]\n                          },\n                          \"target_model_path\": \"@client_details.idNo\",\n                          \"current_model_path\": \"@client_details.idType\"\n                        },\n                       \n                        {\n                          \"validations\": {\n                            \"required\": true,\n                            \"maxLength\": 20,\n                            \"noSpecialCharactersValidator\": true\n                          },\n                          \"required_value\": {\n                            \"$or\": [\n                              {\n                                \"$eq\": [\n                                  \"@client_details.idType\",\n                                  \"2\"\n                                ]\n                              },\n                              {\n                                \"$eq\": [\n                                  \"@client_details.idType\",\n                                  \"3\"\n                                ]\n                              }\n                            ]\n                          },\n                          \"target_model_path\": \"@client_details.idNo\",\n                          \"current_model_path\": \"@client_details.idType\"\n                        },\n                        {\n                          \"validations\": {\n                            \"required\": true\n                          },\n                          \"required_value\": {\n                            \"$or\": [\n                              {\n                                \"$eq\": [\n                                  \"@client_details.idType\",\n                                  \"1\"\n                                ]\n                              }\n                            ]\n                          },\n                          \"target_model_path\": \"@client_details.dateOfIssue\",\n                          \"current_model_path\": \"@client_details.idType\"\n                        }\n                      ]\n                    },\n                    \"output_events\": {\n                      \"functions\": [\n                        {\n                          \"functionName\": \"modifyValidations\"\n                        },\n                        {\n                          \"functionName\": \"idType1validation\"\n                        }\n                      ]\n                    },\n                    \"initialize_functions\": {\n                      \"functions\": [\n                        {\n                          \"functionName\": \"modifyValidations\"\n                        },\n                        {\n                          \"functionName\": \"idType1validation\"\n                        }\n                      ]\n                    }\n                  },\n                  \"updateOn\": \"blur\",\n                  \"component_name\": \"DropDownComponent\"\n                }\n              }\n            ],\n            \"layout\": {\n              \"tv\": {\n                \"flex\": \"100\"\n              },\n              \"mobile\": {\n                \"flex\": \"100\"\n              },\n              \"tablet\": {\n                \"flex\": \"100\"\n              },\n              \"desktop\": {\n                \"flex\": \"100\"\n              }\n            },\n            \"styles\": {\n              \"margin\": \"1em 0em 1em 0em\",\n              \"padding\": \"1em\"\n            },\n            \"section_name\": \"client_details\"\n          }\n        }\n      ],\n      \"panel_name\": \"Policy Owner\"\n    }\n]\nThen add in component's template\n[view] = \"View\";Every level in the View has 'styles','layout' and 'class' in common where we defines CSS Styles as key value pairs in styles object , add responsive flex properties for mobile,tablet,desktop and tv in layout object ,define classes that are present in the library\n\nLayout desides the width of the View components on the UI for respective screen resolutions.Set Layout properties accordingly.\n\n\n[schema]\n\n\n\nProperty\nType\nRequired\n\n\n\n\n[schema]\nobject\nRequired\n\n\n\nThe schema for the Model.\n[schema] = \"schema\";onError()\nError handling callback.\n\n\n\nProperty\nType\nRequired\n\n\n\n\n(onError)\ncallback\nOptional\n\n\n\nDefine callback in your component's class\nonError(error: any) {\n  // do anything\n}Then add in component's template\nonError = \"onError($event)\";changeDetection()\nAn event that triggers on change detection in any of the components.\n\n\n\nProperty\nType\nRequired\n\n\n\n\n(changeDetection)\ncallback\nOptional\n\n\n\nDefine callback in your component's class\nchangeDetection(event: any) {\n  // do anything\n}Then add in component's template\nchangeDetection = \"changeDetection($event)\";Example\n\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: `\n    \n  `,\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  schema = {\n    $id: \"https://example.com/object1666938433.json\",\n    title: \"Generated schema for Root\",\n    type: \"object\",\n    properties: {\n      case: {\n        type: \"object\",\n        properties: {},\n      },\n    },\n  };\n  model = {\n    case: {},\n  };\n\n  view =[\n   {\n      \"icon\": \"\",\n      \"class\": \"pb2 pr-p3\",\n      \"layout\": {\n        \"tv\": {\n          \"flex\": \"100\"\n        },\n        \"mobile\": {\n          \"flex\": \"100\"\n        },\n        \"tablet\": {\n          \"flex\": \"100\"\n        },\n        \"desktop\": {\n          \"flex\": \"100\"\n        }\n      },\n      \"styles\": {},\n      \"expanded\": false,\n      \"sections\": [\n        {\n          \"section\": {\n            \"class\": \"section-card-nm\",\n            \"leafs\": [\n              {\n                \"layout\": {\n                  \"tv\": {\n                    \"flex\": \"30\"\n                  },\n                  \"mobile\": {\n                    \"flex\": \"100\"\n                  },\n                  \"tablet\": {\n                    \"flex\": \"50\"\n                  },\n                  \"desktop\": {\n                    \"flex\": \"30\"\n                  }\n                },\n                \"styles\": {},\n                \"metadata\": {\n                  \"library\": \"manulife-components\",\n                  \"options\": {\n                    \"label\": \"ID Type\",\n                    \"options\": [],\n                    \"model_path\": \"@client_details.idType\",\n                    \"validations\": {\n                      \"type\": \"string\",\n                      \"required\": true,\n                      \"dependencyValidations\": [\n                        {\n                          \"validations\": {\n                            \"required\": true,\n                            \"idNoLengthCheckValidator\": true\n                          },\n                          \"required_value\": {\n                            \"$or\": [\n                              {\n                                \"$eq\": [\n                                  \"@client_details.idType\",\n                                  \"1\"\n                                ]\n                              },\n                              {\n                                \"$eq\": [\n                                  \"@client_details.idType\",\n                                  \"7\"\n                                ]\n                              }\n                            ]\n                          },\n                          \"target_model_path\": \"@client_details.idNo\",\n                          \"current_model_path\": \"@client_details.idType\"\n                        },\n                       \n                        {\n                          \"validations\": {\n                            \"required\": true,\n                            \"maxLength\": 20,\n                            \"noSpecialCharactersValidator\": true\n                          },\n                          \"required_value\": {\n                            \"$or\": [\n                              {\n                                \"$eq\": [\n                                  \"@client_details.idType\",\n                                  \"2\"\n                                ]\n                              },\n                              {\n                                \"$eq\": [\n                                  \"@client_details.idType\",\n                                  \"3\"\n                                ]\n                              }\n                            ]\n                          },\n                          \"target_model_path\": \"@client_details.idNo\",\n                          \"current_model_path\": \"@client_details.idType\"\n                        },\n                        {\n                          \"validations\": {\n                            \"required\": true\n                          },\n                          \"required_value\": {\n                            \"$or\": [\n                              {\n                                \"$eq\": [\n                                  \"@client_details.idType\",\n                                  \"1\"\n                                ]\n                              }\n                            ]\n                          },\n                          \"target_model_path\": \"@client_details.dateOfIssue\",\n                          \"current_model_path\": \"@client_details.idType\"\n                        }\n                      ]\n                    },\n                    \"output_events\": {\n                      \"functions\": [\n                        {\n                          \"functionName\": \"modifyValidations\"\n                        },\n                        {\n                          \"functionName\": \"idType1validation\"\n                        }\n                      ]\n                    },\n                    \"initialize_functions\": {\n                      \"functions\": [\n                        {\n                          \"functionName\": \"modifyValidations\"\n                        },\n                        {\n                          \"functionName\": \"idType1validation\"\n                        }\n                      ]\n                    }\n                  },\n                  \"updateOn\": \"blur\",\n                  \"component_name\": \"DropDownComponent\"\n                }\n              }\n            ],\n            \"layout\": {\n              \"tv\": {\n                \"flex\": \"100\"\n              },\n              \"mobile\": {\n                \"flex\": \"100\"\n              },\n              \"tablet\": {\n                \"flex\": \"100\"\n              },\n              \"desktop\": {\n                \"flex\": \"100\"\n              }\n            },\n            \"styles\": {\n              \"margin\": \"1em 0em 1em 0em\",\n              \"padding\": \"1em\"\n            },\n            \"section_name\": \"client_details\"\n          }\n        }\n      ],\n      \"panel_name\": \"Policy Owner\"\n    }\n  ];\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NDynamicRendererModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NDynamicRendererModule\n\n\n\ncluster_NDynamicRendererModule_declarations\n\n\n\ncluster_NDynamicRendererModule_exports\n\n\n\n\nNDynamicRendererComponent\n\nNDynamicRendererComponent\n\n\n\nNDynamicRendererModule\n\nNDynamicRendererModule\n\nNDynamicRendererModule -->\n\nNDynamicRendererComponent->NDynamicRendererModule\n\n\n\n\n\nNDynamicRendererComponent \n\nNDynamicRendererComponent \n\nNDynamicRendererComponent  -->\n\nNDynamicRendererModule->NDynamicRendererComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Panel   (projects/.../interface.ts)\n                        \n                        \n                            updateOn   (projects/.../interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n    \n    \n        \n            \n                \n                    \n                    Panel\n                \n            \n            \n                \n                            Panels[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    updateOn\n                \n            \n            \n                \n                        \"change\" | \"blur\" | \"submit\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
