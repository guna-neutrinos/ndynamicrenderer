var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ChangeEvent.html",[0,0.125,1,0.39]],["body/interfaces/ChangeEvent.html",[0,0.239,1,0.571,2,0.475,3,0.412,4,0.412,5,0.353,6,0.245,7,0.149,8,0.412,9,0.779,10,0.876,11,0.577,12,0.787,13,0.353,14,0.481,15,0.571,16,0.651,17,0.384,18,0.046,19,0.753,20,0.759,21,0.494,22,0.759,23,0.759,24,0.759,25,0.759,26,0.759,27,0.876,28,0.876,29,0.767,30,0.542,31,0.665,32,0.618,33,0.542,34,0.767,35,0.542,36,0.759,37,0.666,38,0.494,39,0.475,40,0.475,41,0.618,42,1.036,43,0.452,44,0.475,45,0.706,46,0.475,47,0.665,48,0.475,49,0.824,50,0.481,51,0.549,52,0.475,53,0.571,54,0.475,55,0.665,56,0.481,57,0.721,58,0.412,59,0.475,60,0.475,61,0.666,62,0.907,63,0.665,64,0.274,65,0.475,66,0.542,67,0.692,68,0.666,69,0.577,70,0.542,71,0.542,72,0.412,73,0.542,74,0.542,75,0.475,76,0.665,77,0.412,78,0.542,79,0.542,80,0.542,81,0.665,82,0.412,83,0.666,84,0.876,85,0.475,86,0.577,87,0.542,88,0.412,89,0.542,90,0.665,91,0.542,92,0.542,93,0.542,94,0.542,95,0.475,96,0.475,97,0.412,98,0.665,99,0.767,100,0.298,101,0.412,102,0.542,103,0.475,104,0.542,105,0.475,106,0.475,107,0.475,108,0.028,109,0.028]],["title/interfaces/Config.html",[0,0.125,100,0.329]],["body/interfaces/Config.html",[0,0.239,1,0.495,2,0.475,3,0.413,4,0.413,5,0.354,6,0.246,7,0.149,8,0.413,10,0.76,11,0.413,12,0.577,13,0.354,14,0.481,15,0.354,16,0.571,17,0.392,18,0.046,19,0.753,20,0.76,21,0.495,22,0.76,23,0.76,24,0.76,25,0.76,26,0.76,27,0.877,28,0.877,29,0.768,30,0.543,31,0.666,32,0.618,33,0.543,34,0.768,35,0.543,36,0.76,37,0.666,38,0.495,39,0.475,40,0.475,41,0.618,42,1.042,43,0.452,44,0.475,45,0.707,46,0.475,47,0.666,48,0.475,49,0.825,50,0.481,51,0.549,52,0.475,53,0.571,54,0.475,55,0.666,56,0.481,57,0.722,58,0.413,59,0.475,60,0.475,61,0.666,62,0.966,63,0.666,64,0.274,65,0.475,66,0.543,67,0.693,68,0.666,69,0.577,70,0.543,71,0.543,72,0.413,73,0.543,74,0.543,75,0.475,76,0.666,77,0.413,78,0.543,79,0.543,80,0.543,81,0.666,82,0.413,83,0.666,84,0.877,85,0.475,86,0.577,87,0.543,88,0.413,89,0.543,90,0.666,91,0.543,92,0.543,93,0.543,94,0.543,95,0.475,96,0.475,97,0.413,98,0.666,99,0.768,100,0.417,101,0.722,102,0.543,103,0.475,104,0.543,105,0.475,106,0.475,107,0.475,108,0.028,109,0.028]],["title/interfaces/Flex.html",[0,0.125,45,0.39]],["body/interfaces/Flex.html",[0,0.239,1,0.497,2,0.478,3,0.415,4,0.415,5,0.356,6,0.247,7,0.15,8,0.415,10,0.763,11,0.415,12,0.58,13,0.356,14,0.483,15,0.356,16,0.573,17,0.384,18,0.046,19,0.753,20,0.761,21,0.497,22,0.763,23,0.763,24,0.763,25,0.763,26,0.763,27,0.88,28,0.88,29,0.77,30,0.546,31,0.668,32,0.62,33,0.546,34,0.77,35,0.546,36,0.761,37,0.668,38,0.497,39,0.478,40,0.478,41,0.62,42,1.043,43,0.453,44,0.478,45,0.743,46,0.478,47,0.668,48,0.478,49,0.826,50,0.483,51,0.55,52,0.478,53,0.573,54,0.478,55,0.668,56,0.483,57,0.724,58,0.415,59,0.478,60,0.478,61,0.668,62,0.909,63,0.668,64,0.274,65,0.478,66,0.546,67,0.694,68,0.668,69,0.58,70,0.546,71,0.546,72,0.415,73,0.546,74,0.546,75,0.478,76,0.668,77,0.415,78,0.546,79,0.546,80,0.546,81,0.668,82,0.415,83,0.668,84,0.88,85,0.478,86,0.58,87,0.546,88,0.415,89,0.546,90,0.668,91,0.546,92,0.546,93,0.546,94,0.546,95,0.478,96,0.478,97,0.415,98,0.668,99,0.77,100,0.3,101,0.415,102,0.546,103,0.478,104,0.546,105,0.478,106,0.478,107,0.478,108,0.028,109,0.028]],["title/interfaces/Function.html",[0,0.125,16,0.39]],["body/interfaces/Function.html",[0,0.238,1,0.488,2,0.466,3,0.405,4,0.405,5,0.347,6,0.241,7,0.146,8,0.405,9,0.765,10,0.75,11,0.405,12,0.57,13,0.347,14,0.476,15,0.613,16,0.646,17,0.39,18,0.046,19,0.751,20,0.754,21,0.488,22,0.75,23,0.75,24,0.75,25,0.75,26,0.75,27,0.868,28,0.868,29,0.76,30,0.532,31,0.657,32,0.646,33,0.532,34,0.76,35,0.532,36,0.754,37,0.659,38,0.488,39,0.466,40,0.466,41,0.613,42,1.046,43,0.449,44,0.466,45,0.703,46,0.466,47,0.657,48,0.466,49,0.821,50,0.476,51,0.545,52,0.466,53,0.565,54,0.466,55,0.825,56,0.476,57,0.716,58,0.405,59,0.466,60,0.466,61,0.659,62,0.902,63,0.657,64,0.272,65,0.466,66,0.532,67,0.689,68,0.659,69,0.57,70,0.532,71,0.532,72,0.405,73,0.532,74,0.532,75,0.466,76,0.657,77,0.405,78,0.532,79,0.532,80,0.532,81,0.657,82,0.405,83,0.659,84,0.868,85,0.466,86,0.659,87,0.532,88,0.405,89,0.532,90,0.657,91,0.532,92,0.532,93,0.532,94,0.532,95,0.466,96,0.466,97,0.405,98,0.902,99,0.946,100,0.292,101,0.405,102,0.532,103,0.466,104,0.532,105,0.466,106,0.466,107,0.466,108,0.027,109,0.027]],["title/interfaces/KeyValue.html",[0,0.125,49,0.455]],["body/interfaces/KeyValue.html",[0,0.239,1,0.498,2,0.48,3,0.417,4,0.417,5,0.357,6,0.346,7,0.21,8,0.417,10,0.765,11,0.417,12,0.581,14,0.301,15,0.357,16,0.574,17,0.375,18,0.046,19,0.754,20,0.762,21,0.498,22,0.765,23,0.765,24,0.765,25,0.765,26,0.765,27,0.881,28,0.881,29,0.772,30,0.548,31,0.67,32,0.621,33,0.548,34,0.772,35,0.548,36,0.762,37,0.725,38,0.498,39,0.48,40,0.48,41,0.621,42,1.041,43,0.454,44,0.48,45,0.708,46,0.48,47,0.67,48,0.48,49,0.84,50,0.484,51,0.551,52,0.48,53,0.574,54,0.48,55,0.67,56,0.484,57,0.725,58,0.417,59,0.48,60,0.48,61,0.67,62,0.91,63,0.67,64,0.275,65,0.48,66,0.548,67,0.694,68,0.67,69,0.581,70,0.548,71,0.548,72,0.417,73,0.548,74,0.548,75,0.48,76,0.67,77,0.417,78,0.548,79,0.548,80,0.548,81,0.67,82,0.417,83,0.67,84,0.881,85,0.48,86,0.581,87,0.548,88,0.417,89,0.548,90,0.67,91,0.548,92,0.548,93,0.548,94,0.548,95,0.48,96,0.48,97,0.417,98,0.67,99,0.772,100,0.301,101,0.417,102,0.548,103,0.48,104,0.548,105,0.48,106,0.48,107,0.48,108,0.028,109,0.028,110,2.155,111,1.595,112,2.642]],["title/interfaces/Layout.html",[0,0.125,43,0.271]],["body/interfaces/Layout.html",[0,0.238,1,0.486,2,0.463,3,0.402,4,0.402,5,0.344,6,0.239,7,0.145,8,0.402,9,0.76,10,0.746,11,0.402,12,0.567,13,0.344,14,0.474,15,0.344,16,0.563,17,0.401,18,0.046,19,0.75,20,0.752,21,0.486,22,0.746,23,0.746,24,0.746,25,0.746,26,0.746,27,0.864,28,0.864,29,0.757,30,0.529,31,0.653,32,0.611,33,0.529,34,0.757,35,0.529,36,0.752,37,0.657,38,0.486,39,0.463,40,0.463,41,0.611,42,1.033,43,0.465,44,0.463,45,0.762,46,0.463,47,0.867,48,0.463,49,0.819,50,0.474,51,0.543,52,0.463,53,0.563,54,0.463,55,0.653,56,0.474,57,0.713,58,0.402,59,0.463,60,0.463,61,0.657,62,0.9,63,0.653,64,0.271,65,0.463,66,0.529,67,0.687,68,0.657,69,0.567,70,0.529,71,0.529,72,0.402,73,0.529,74,0.529,75,0.463,76,0.653,77,0.402,78,0.529,79,0.529,80,0.529,81,0.653,82,0.402,83,0.657,84,0.864,85,0.463,86,0.567,87,0.529,88,0.402,89,0.529,90,0.757,91,0.529,92,0.529,93,0.529,94,0.529,95,0.463,96,0.463,97,0.402,98,0.653,99,0.757,100,0.29,101,0.402,102,0.746,103,0.653,104,0.746,105,0.822,106,0.822,107,0.822,108,0.027,109,0.027]],["title/interfaces/Leaf.html",[0,0.125,53,0.39]],["body/interfaces/Leaf.html",[0,0.237,1,0.479,2,0.454,3,0.394,4,0.394,5,0.338,6,0.235,7,0.142,8,0.394,9,0.745,10,0.736,11,0.394,12,0.559,13,0.338,14,0.47,15,0.684,16,0.557,17,0.404,18,0.046,19,0.747,20,0.747,21,0.479,22,0.736,23,0.736,24,0.736,25,0.736,26,0.736,27,0.931,28,0.931,29,0.815,30,0.519,31,0.645,32,0.606,33,0.519,34,0.749,35,0.519,36,0.815,37,0.65,38,0.479,39,0.454,40,0.454,41,0.684,42,1.043,43,0.485,44,0.454,45,0.699,46,0.454,47,0.645,48,0.454,49,0.859,50,0.47,51,0.54,52,0.454,53,0.64,54,0.815,55,0.815,56,0.589,57,0.707,58,0.394,59,0.454,60,0.454,61,0.65,62,0.894,63,0.645,64,0.269,65,0.454,66,0.519,67,0.684,68,0.65,69,0.559,70,0.519,71,0.519,72,0.394,73,0.519,74,0.519,75,0.454,76,0.645,77,0.394,78,0.519,79,0.519,80,0.519,81,0.645,82,0.394,83,0.65,84,0.855,85,0.454,86,0.559,87,0.519,88,0.394,89,0.519,90,0.645,91,0.519,92,0.519,93,0.519,94,0.519,95,0.454,96,0.454,97,0.394,98,0.645,99,0.749,100,0.285,101,0.394,102,0.519,103,0.454,104,0.519,105,0.454,106,0.454,107,0.454,108,0.027,109,0.027]],["title/interfaces/Metadata.html",[0,0.125,56,0.329]],["body/interfaces/Metadata.html",[0,0.236,1,0.472,2,0.444,3,0.386,4,0.386,5,0.33,6,0.23,7,0.139,8,0.386,9,0.729,10,0.724,11,0.386,12,0.551,13,0.33,14,0.464,15,0.55,16,0.55,17,0.406,18,0.046,19,0.745,20,0.741,21,0.472,22,0.724,23,0.724,24,0.724,25,0.724,26,0.724,27,0.845,28,0.845,29,0.74,30,0.507,31,0.635,32,0.66,33,0.507,34,0.74,35,0.507,36,0.741,37,0.642,38,0.472,39,0.444,40,0.444,41,0.6,42,1.046,43,0.441,44,0.444,45,0.695,46,0.444,47,0.635,48,0.444,49,0.837,50,0.464,51,0.535,52,0.444,53,0.55,54,0.444,55,0.635,56,0.506,57,0.837,58,0.386,59,0.444,60,0.444,61,0.81,62,0.986,63,0.888,64,0.292,65,0.635,66,0.724,67,0.745,68,0.7,69,0.77,70,0.724,71,0.724,72,0.551,73,0.724,74,0.724,75,0.635,76,0.635,77,0.386,78,0.507,79,0.507,80,0.507,81,0.635,82,0.386,83,0.642,84,0.845,85,0.444,86,0.551,87,0.507,88,0.386,89,0.507,90,0.635,91,0.507,92,0.507,93,0.507,94,0.507,95,0.444,96,0.444,97,0.386,98,0.635,99,0.74,100,0.279,101,0.386,102,0.507,103,0.444,104,0.507,105,0.444,106,0.444,107,0.444,108,0.027,109,0.027]],["title/components/NDynamicRendererComponent.html",[64,0.164,113,1.535]],["body/components/NDynamicRendererComponent.html",[1,0.459,3,0.23,4,0.23,5,0.197,6,0.506,7,0.335,9,1.013,11,0.23,12,0.467,13,0.459,14,0.268,15,0.59,16,0.318,17,0.397,18,0.046,19,0.197,20,0.536,32,0.625,36,0.23,37,0.23,38,0.504,41,0.197,42,0.428,48,0.538,50,0.166,51,0.478,53,0.459,55,0.678,56,0.558,58,0.371,64,0.286,65,0.678,68,0.76,69,0.23,72,0.371,75,0.678,76,0.265,77,0.661,82,0.467,86,0.629,88,0.467,97,0.467,108,0.018,109,0.018,111,3.235,113,1.806,114,1.422,115,1.19,116,1.459,117,1.459,118,3.74,119,3.74,120,1.19,121,2.355,122,2.961,123,2.415,124,2.721,125,3.677,126,1.921,127,2.961,128,1.921,129,2.355,130,4.194,131,2.961,132,2.961,133,2.415,134,2.961,135,3.041,136,2.961,137,3.728,138,1.921,139,2.355,140,2.355,141,3.398,142,2.355,143,2.355,144,2.355,145,3.398,146,3.728,147,2.355,148,3.398,149,2.355,150,3.422,151,2.961,152,2.415,153,2.355,154,1.459,155,2.768,156,2.961,157,3.398,158,2.355,159,3.561,160,1.459,161,1.459,162,1.459,163,3.728,164,1.459,165,1.459,166,2.355,167,1.459,168,2.355,169,3.398,170,2.355,171,1.921,172,4.192,173,2.355,174,1.459,175,3.86,176,2.355,177,2.355,178,2.355,179,2.355,180,3.422,181,1.459,182,2.355,183,2.355,184,3.728,185,2.355,186,3.728,187,2.355,188,1.459,189,3.398,190,1.921,191,2.355,192,1.921,193,2.355,194,1.459,195,2.355,196,2.355,197,1.459,198,2.355,199,2.355,200,1.921,201,1.459,202,2.355,203,1.459,204,2.355,205,2.355,206,1.459,207,2.355,208,1.459,209,1.459,210,1.459,211,1.459,212,3.252,213,1.921,214,1.459,215,1.459,216,2.355,217,1.459,218,2.961,219,2.961,220,2.355,221,1.459,222,1.459,223,1.459,224,2.768,225,3.398,226,2.961,227,1.013,228,1.013,229,1.19,230,1.459,231,1.459,232,1.19,233,2.355,234,1.459,235,2.415,236,1.459,237,1.459,238,2.355,239,3.728,240,3.728,241,1.459,242,1.459,243,3.252,244,3.987,245,1.19,246,4.365,247,2.772,248,1.459,249,3.728,250,1.459,251,1.459,252,1.459,253,1.459,254,1.459,255,1.459,256,1.459,257,1.459,258,1.459,259,1.459,260,1.459,261,1.459,262,2.355,263,2.355,264,2.355,265,2.355,266,2.355,267,1.459,268,1.459,269,1.459,270,1.459,271,1.459,272,2.355,273,1.459,274,1.013,275,1.459,276,1.459,277,1.921,278,2.355,279,1.459,280,2.355,281,1.459,282,1.459,283,2.355,284,1.459,285,1.459,286,2.355,287,1.459,288,1.459,289,1.459,290,1.19,291,1.459,292,1.459,293,2.355,294,2.355,295,1.459,296,3.398,297,1.459,298,1.459,299,1.459]],["title/modules/NDynamicRendererModule.html",[300,1.744,301,1.535]],["body/modules/NDynamicRendererModule.html",[3,0.471,4,0.471,5,0.404,6,0.425,7,0.314,9,0.89,15,0.542,17,0.3,18,0.045,19,0.404,32,0.542,41,0.404,43,0.28,64,0.17,100,0.662,101,0.796,108,0.03,109,0.03,111,2.421,113,2.982,114,2.421,118,3.143,119,2.073,124,2.421,133,3.692,138,2.436,155,3.36,159,3.271,172,3.271,180,2.436,190,3.271,224,3.869,227,2.073,228,2.073,229,2.436,232,2.436,243,3.271,247,3.271,300,2.421,301,2.867,302,3.143,303,2.421,304,2.436,305,2.436,306,2.436,307,3.271,308,2.436,309,2.436,310,2.986,311,4.009,312,4.009,313,4.009,314,3.271,315,2.986,316,2.986,317,4.009,318,4.009,319,3.271,320,3.271,321,4.009,322,2.986,323,3.271,324,4.526,325,2.986,326,4.009,327,2.986,328,4.009,329,4.009,330,4.526,331,2.986,332,4.009,333,2.436,334,4.009,335,2.986,336,4.009,337,2.986,338,4.009,339,2.986,340,4.009,341,4.009,342,4.009,343,2.436,344,4.009,345,2.436,346,2.436,347,2.986,348,2.986,349,2.986,350,2.986,351,2.986]],["title/interfaces/Options.html",[0,0.125,67,0.39]],["body/interfaces/Options.html",[0,0.235,1,0.464,2,0.434,3,0.377,4,0.377,5,0.323,6,0.322,7,0.195,8,0.377,9,0.713,10,0.834,11,0.377,12,0.542,13,0.323,14,0.458,15,0.736,16,0.543,17,0.421,18,0.046,19,0.742,20,0.734,21,0.464,22,0.713,23,0.713,24,0.713,25,0.713,26,0.713,27,0.834,28,0.834,29,0.731,30,0.496,31,0.624,32,0.594,33,0.496,34,0.731,35,0.496,36,0.734,37,0.693,38,0.543,39,0.434,40,0.434,41,0.594,42,1.041,43,0.437,44,0.434,45,0.69,46,0.434,47,0.624,48,0.434,49,0.806,50,0.458,51,0.53,52,0.434,53,0.543,54,0.434,55,0.624,56,0.458,57,0.693,58,0.377,59,0.434,60,0.434,61,0.634,62,0.907,63,0.624,64,0.284,65,0.434,66,0.496,67,0.73,68,0.734,69,0.542,70,0.496,71,0.496,72,0.377,73,0.496,74,0.496,75,0.434,76,0.881,77,0.542,78,0.713,79,0.713,80,0.713,81,0.881,82,0.542,83,0.764,84,1.06,85,0.624,86,0.634,87,0.713,88,0.542,89,0.713,90,0.731,91,0.713,92,0.713,93,0.713,94,0.713,95,0.624,96,0.799,97,0.377,98,0.624,99,0.731,100,0.272,101,0.377,102,0.496,103,0.434,104,0.496,105,0.434,106,0.434,107,0.434,108,0.026,109,0.026,110,1.95,111,1.443,352,2.391]],["title/interfaces/OutputEvents.html",[0,0.125,83,0.455]],["body/interfaces/OutputEvents.html",[0,0.239,1,0.62,2,0.478,3,0.415,4,0.415,5,0.356,6,0.247,7,0.15,8,0.415,10,0.763,11,0.415,12,0.58,13,0.356,14,0.483,15,0.356,16,0.573,17,0.384,18,0.046,19,0.753,20,0.761,21,0.497,22,0.763,23,0.763,24,0.763,25,0.763,26,0.763,27,0.88,28,0.88,29,0.77,30,0.546,31,0.668,32,0.62,33,0.546,34,0.77,35,0.546,36,0.761,37,0.668,38,0.497,39,0.478,40,0.478,41,0.62,42,1.037,43,0.453,44,0.478,45,0.708,46,0.478,47,0.668,48,0.478,49,0.826,50,0.483,51,0.55,52,0.478,53,0.573,54,0.478,55,0.668,56,0.483,57,0.724,58,0.415,59,0.478,60,0.478,61,0.668,62,0.909,63,0.668,64,0.274,65,0.478,66,0.546,67,0.694,68,0.668,69,0.58,70,0.546,71,0.546,72,0.415,73,0.546,74,0.546,75,0.478,76,0.668,77,0.415,78,0.546,79,0.546,80,0.546,81,0.668,82,0.415,83,0.724,84,0.88,85,0.478,86,0.58,87,0.546,88,0.415,89,0.546,90,0.668,91,0.546,92,0.546,93,0.546,94,0.546,95,0.478,96,0.478,97,0.724,98,0.668,99,0.77,100,0.3,101,0.415,102,0.546,103,0.478,104,0.546,105,0.478,106,0.478,107,0.478,108,0.028,109,0.028]],["title/interfaces/Panels.html",[0,0.125,21,0.39]],["body/interfaces/Panels.html",[0,0.235,1,0.464,2,0.434,3,0.377,4,0.377,5,0.323,6,0.224,7,0.136,8,0.377,9,0.712,10,0.712,11,0.377,12,0.541,13,0.323,14,0.5,15,0.703,16,0.543,17,0.404,18,0.046,19,0.742,20,0.82,21,0.543,22,0.834,23,0.834,24,0.912,25,0.834,26,0.834,27,0.912,28,0.912,29,0.798,30,0.496,31,0.88,32,0.629,33,0.712,34,0.928,35,0.712,36,0.832,37,0.693,38,0.543,39,0.624,40,0.624,41,0.69,42,1.048,43,0.488,44,0.624,45,0.703,46,0.624,47,0.73,48,0.73,49,0.852,50,0.582,51,0.53,52,0.434,53,0.543,54,0.434,55,0.624,56,0.458,57,0.693,58,0.377,59,0.434,60,0.434,61,0.634,62,0.88,63,0.624,64,0.265,65,0.434,66,0.496,67,0.675,68,0.634,69,0.541,70,0.496,71,0.496,72,0.377,73,0.496,74,0.496,75,0.434,76,0.624,77,0.377,78,0.496,79,0.496,80,0.496,81,0.624,82,0.377,83,0.634,84,0.834,85,0.434,86,0.541,87,0.496,88,0.377,89,0.496,90,0.624,91,0.496,92,0.496,93,0.496,94,0.496,95,0.434,96,0.434,97,0.377,98,0.624,99,0.73,100,0.272,101,0.377,102,0.496,103,0.434,104,0.496,105,0.434,106,0.434,107,0.434,108,0.026,109,0.026]],["title/interfaces/Section.html",[0,0.125,51,0.329]],["body/interfaces/Section.html",[0,0.238,1,0.482,2,0.458,3,0.397,4,0.397,5,0.34,6,0.236,7,0.143,8,0.397,9,0.751,10,0.74,11,0.397,12,0.562,13,0.34,14,0.471,15,0.685,16,0.559,17,0.4,18,0.046,19,0.748,20,0.749,21,0.482,22,0.859,23,0.859,24,0.74,25,0.859,26,0.859,27,0.934,28,0.934,29,0.818,30,0.522,31,0.648,32,0.608,33,0.522,34,0.752,35,0.522,36,0.817,37,0.652,38,0.482,39,0.458,40,0.458,41,0.685,42,1.038,43,0.486,44,0.458,45,0.7,46,0.458,47,0.648,48,0.458,49,0.86,50,0.471,51,0.59,52,0.818,53,0.642,54,0.458,55,0.648,56,0.471,57,0.709,58,0.397,59,0.458,60,0.458,61,0.652,62,0.896,63,0.648,64,0.27,65,0.458,66,0.522,67,0.685,68,0.652,69,0.562,70,0.522,71,0.522,72,0.397,73,0.522,74,0.522,75,0.458,76,0.648,77,0.397,78,0.522,79,0.522,80,0.522,81,0.648,82,0.397,83,0.652,84,0.859,85,0.458,86,0.562,87,0.522,88,0.397,89,0.522,90,0.648,91,0.522,92,0.522,93,0.522,94,0.522,95,0.458,96,0.458,97,0.397,98,0.648,99,0.752,100,0.287,101,0.397,102,0.522,103,0.458,104,0.522,105,0.458,106,0.458,107,0.458,108,0.027,109,0.027]],["title/interfaces/Sections.html",[0,0.125,50,0.329]],["body/interfaces/Sections.html",[0,0.239,1,0.497,2,0.478,3,0.415,4,0.415,5,0.356,6,0.247,7,0.15,8,0.415,10,0.763,11,0.415,12,0.58,13,0.356,14,0.483,15,0.356,16,0.573,17,0.384,18,0.046,19,0.753,20,0.761,21,0.497,22,0.763,23,0.763,24,0.763,25,0.763,26,0.763,27,0.88,28,0.88,29,0.77,30,0.546,31,0.668,32,0.62,33,0.546,34,0.77,35,0.546,36,0.761,37,0.668,38,0.497,39,0.478,40,0.478,41,0.62,42,1.037,43,0.453,44,0.478,45,0.708,46,0.478,47,0.668,48,0.478,49,0.826,50,0.523,51,0.614,52,0.478,53,0.573,54,0.478,55,0.668,56,0.483,57,0.724,58,0.415,59,0.478,60,0.478,61,0.668,62,0.909,63,0.668,64,0.274,65,0.478,66,0.546,67,0.694,68,0.668,69,0.58,70,0.546,71,0.546,72,0.415,73,0.546,74,0.546,75,0.478,76,0.668,77,0.415,78,0.546,79,0.546,80,0.546,81,0.668,82,0.415,83,0.668,84,0.88,85,0.478,86,0.58,87,0.546,88,0.415,89,0.546,90,0.668,91,0.546,92,0.546,93,0.546,94,0.546,95,0.478,96,0.478,97,0.415,98,0.668,99,0.77,100,0.3,101,0.415,102,0.546,103,0.478,104,0.546,105,0.478,106,0.478,107,0.478,108,0.028,109,0.028]],["title/coverage.html",[353,2.722]],["body/coverage.html",[0,0.249,1,0.471,5,0.471,6,0.548,7,0.334,8,0.909,16,0.471,17,0.261,18,0.045,21,0.471,43,0.327,45,0.471,49,0.55,50,0.397,51,0.397,53,0.471,56,0.397,64,0.198,67,0.471,83,0.55,100,0.397,108,0.034,109,0.034,113,1.854,118,3.082,119,2.422,120,2.846,155,2.422,235,2.846,245,4.495,353,2.422,354,3.488,355,3.488,356,3.488,357,3.488,358,3.488,359,3.488,360,4.882,361,3.488,362,3.488,363,4.882,364,4.438,365,4.438,366,3.488,367,3.488,368,4.882,369,4.882,370,3.488,371,2.422,372,3.488,373,3.488,374,3.488,375,3.488,376,3.621,377,4.438,378,2.846,379,2.846,380,3.488,381,3.488]],["title/dependencies.html",[303,2.094,382,1.682]],["body/dependencies.html",[7,0.278,18,0.045,43,0.383,64,0.232,108,0.037,109,0.037,114,2.953,124,2.465,227,2.835,228,2.835,303,2.465,333,3.33,343,3.33,345,3.33,383,4.082,384,5.745,385,4.082,386,4.891,387,4.082,388,4.082,389,4.082,390,4.082,391,4.891,392,3.99,393,4.082,394,4.082,395,4.082,396,4.082,397,4.082,398,4.082,399,4.082,400,4.082,401,4.082,402,4.082,403,4.082,404,4.082]],["title/index.html",[13,0.327,405,2.423,406,2.423]],["body/index.html",[7,0.225,11,0.463,12,0.463,14,0.452,15,0.262,17,0.336,18,0.046,19,0.397,29,0.352,31,0.534,32,0.48,34,0.534,36,0.758,37,0.56,38,0.48,39,0.352,40,0.352,41,0.576,43,0.438,44,0.352,45,0.732,46,0.352,47,0.775,50,0.335,51,0.335,52,0.534,54,0.646,56,0.335,57,0.463,61,0.463,62,0.961,63,0.534,64,0.167,67,0.48,68,0.305,69,0.463,72,0.463,77,0.736,81,0.534,82,0.758,85,0.352,86,0.305,88,0.736,90,0.646,95,0.352,96,0.534,97,0.463,98,0.816,99,0.721,100,0.22,101,0.736,103,0.352,105,0.721,106,0.721,107,0.721,108,0.022,109,0.022,114,2.145,115,2.397,123,1.579,124,2.145,125,3.236,126,1.579,128,1.579,135,1.579,150,4.269,152,2.898,171,3.479,175,1.579,192,1.579,200,1.579,213,4.386,224,2.041,274,2.041,277,2.898,290,1.579,300,1.169,301,2.386,314,1.579,319,3.806,320,1.579,323,1.579,346,2.397,353,2.041,371,1.344,382,2.041,407,1.936,408,1.936,409,2.939,410,1.936,411,1.936,412,1.936,413,1.579,414,2.939,415,2.939,416,3.966,417,2.939,418,1.936,419,1.936,420,1.936,421,1.936,422,1.936,423,1.936,424,1.936,425,1.936,426,1.936,427,1.936,428,1.936,429,4.265,430,1.936,431,1.936,432,1.936,433,1.936,434,2.939,435,2.939,436,1.936,437,1.936,438,1.936,439,1.936,440,1.936,441,1.936,442,1.936,443,3.552,444,1.936,445,1.936,446,1.936,447,1.936,448,1.936,449,1.936,450,1.936,451,3.552,452,3.966,453,4.49,454,3.552,455,2.939,456,3.966,457,3.966,458,1.936,459,1.936,460,1.936,461,1.936,462,1.936,463,1.936,464,1.936,465,1.936,466,1.936,467,1.936,468,3.966,469,1.936,470,1.936,471,1.936,472,1.936,473,1.936,474,1.936,475,1.936,476,2.939,477,3.966,478,2.939,479,2.939,480,2.939,481,2.939,482,2.939,483,2.939,484,2.939,485,2.939,486,2.939,487,2.939,488,2.939,489,3.236,490,3.966,491,2.939,492,2.939,493,2.939,494,2.939,495,2.939,496,2.939,497,1.936,498,1.936,499,1.936,500,1.936,501,1.936,502,1.936,503,1.936,504,1.936,505,1.936,506,1.936,507,2.939,508,1.936,509,2.939,510,1.936,511,1.936,512,3.552,513,1.936,514,1.936,515,1.936,516,1.936,517,2.939,518,1.936,519,1.936,520,1.936,521,1.936]],["title/modules.html",[302,2.722]],["body/modules.html",[18,0.04,108,0.04,109,0.04,301,2.429,302,3.174,392,3.729,413,3.729,522,4.572,523,4.572]],["title/overview.html",[524,3.198]],["body/overview.html",[2,0.787,18,0.042,64,0.246,108,0.038,109,0.038,113,3.063,300,2.615,301,2.996,303,3.058,304,3.533,305,3.533,306,3.533,307,4.132,308,3.533,309,3.533,371,3.007,489,4.379,524,3.533,525,4.33]],["title/properties.html",[14,0.395,382,1.682]],["body/properties.html",[14,0.523,18,0.042,61,0.724,108,0.04,109,0.04,526,4.591]],["title/miscellaneous/typealiases.html",[527,1.463,528,3.468]],["body/miscellaneous/typealiases.html",[6,0.418,7,0.253,8,0.701,13,0.601,17,0.333,18,0.042,20,0.811,21,0.601,57,0.811,58,0.701,59,0.808,60,0.808,108,0.039,109,0.039,527,2.685,529,4.448,530,5.144]],["title/miscellaneous/variables.html",[527,1.463,531,2.829]],["body/miscellaneous/variables.html",[6,0.415,7,0.251,13,0.597,17,0.384,18,0.042,38,0.597,108,0.039,109,0.039,212,3.606,274,3.069,376,3.606,378,4.181,379,4.181,527,2.669,531,3.606,532,5.126,533,4.42,534,4.42,535,4.42]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":245,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"coverage.html":{}}}],["0.0.1.tgz",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":404,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":363,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":360,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":359,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":489,"title":{},"body":{"index.html":{},"overview.html":{}}}],["1.0.4",{"_index":526,"title":{},"body":{"properties.html":{}}}],["1.1.19",{"_index":395,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":358,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":365,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":213,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["12.0.0",{"_index":388,"title":{},"body":{"dependencies.html":{}}}],["12.1.0",{"_index":384,"title":{},"body":{"dependencies.html":{}}}],["12.2.13",{"_index":386,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":525,"title":{},"body":{"overview.html":{}}}],["14",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["14.2.0",{"_index":484,"title":{},"body":{"index.html":{}}}],["16",{"_index":366,"title":{},"body":{"coverage.html":{}}}],["16/23",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":490,"title":{},"body":{"index.html":{}}}],["2.2.0",{"_index":402,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":364,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":491,"title":{},"body":{"index.html":{}}}],["33",{"_index":361,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":357,"title":{},"body":{"coverage.html":{}}}],["6.6.0",{"_index":400,"title":{},"body":{"dependencies.html":{}}}],["69",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["9/24",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":443,"title":{},"body":{"index.html":{}}}],["accepts",{"_index":414,"title":{},"body":{"index.html":{}}}],["accordingly",{"_index":506,"title":{},"body":{"index.html":{}}}],["actual",{"_index":447,"title":{},"body":{"index.html":{}}}],["actual_component",{"_index":299,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["add",{"_index":429,"title":{},"body":{"index.html":{}}}],["addformats",{"_index":230,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["addformats(this.ajv",{"_index":236,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["ajv",{"_index":130,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["aliases",{"_index":529,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular/animations",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":385,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":343,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":387,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":227,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"dependencies.html":{}}}],["angular/flex",{"_index":345,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":228,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":390,"title":{},"body":{"dependencies.html":{}}}],["angular/material/card",{"_index":337,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["angular/material/expansion",{"_index":335,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["angular/material/input",{"_index":339,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["angular/platform",{"_index":391,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":393,"title":{},"body":{"dependencies.html":{}}}],["anything",{"_index":514,"title":{},"body":{"index.html":{}}}],["app",{"_index":516,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":518,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":519,"title":{},"body":{"index.html":{}}}],["applications",{"_index":438,"title":{},"body":{"index.html":{}}}],["args",{"_index":205,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["arguments",{"_index":99,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["array",{"_index":11,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["async",{"_index":146,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["await",{"_index":219,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["based",{"_index":93,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["beta.34",{"_index":389,"title":{},"body":{"dependencies.html":{}}}],["better",{"_index":508,"title":{},"body":{"index.html":{}}}],["binding",{"_index":474,"title":{},"body":{"index.html":{}}}],["blur",{"_index":59,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"miscellaneous/typealiases.html":{}}}],["boolean",{"_index":48,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["boolean(this.modelform.value[i",{"_index":281,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["border",{"_index":479,"title":{},"body":{"index.html":{}}}],["break",{"_index":280,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["browse",{"_index":523,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":392,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["callback",{"_index":512,"title":{},"body":{"index.html":{}}}],["card",{"_index":26,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["case",{"_index":277,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["case.casedetails.primarylife.personaldetails.sex",{"_index":495,"title":{},"body":{"index.html":{}}}],["case.personaldetails.name",{"_index":80,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["catch",{"_index":249,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["change",{"_index":58,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"miscellaneous/typealiases.html":{}}}],["change_event",{"_index":97,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["change_event?.functions",{"_index":283,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["changeevent",{"_index":1,"title":{"interfaces/ChangeEvent.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{}}}],["changes",{"_index":183,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["checkboxcomponent",{"_index":456,"title":{},"body":{"index.html":{}}}],["checkon",{"_index":433,"title":{},"body":{"index.html":{}}}],["class",{"_index":41,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["class:\"panel_color",{"_index":481,"title":{},"body":{"index.html":{}}}],["classes",{"_index":501,"title":{},"body":{"index.html":{}}}],["classname",{"_index":441,"title":{},"body":{"index.html":{}}}],["cluster_ndynamicrenderermodule",{"_index":304,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["cluster_ndynamicrenderermodule_declarations",{"_index":306,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["cluster_ndynamicrenderermodule_exports",{"_index":305,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["code",{"_index":466,"title":{},"body":{"index.html":{}}}],["color:'red",{"_index":482,"title":{},"body":{"index.html":{}}}],["color:blue",{"_index":291,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["common",{"_index":499,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":342,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["compodoc/compodoc",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":64,"title":{"components/NDynamicRendererComponent.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["component's",{"_index":477,"title":{},"body":{"index.html":{}}}],["component_name",{"_index":63,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["component_template",{"_index":297,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["componentname",{"_index":445,"title":{},"body":{"index.html":{}}}],["components",{"_index":114,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"dependencies.html":{},"index.html":{}}}],["componentvalidation",{"_index":139,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["componentvalidation(metadata",{"_index":166,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["condition",{"_index":70,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["config",{"_index":100,"title":{"interfaces/Config.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"index.html":{}}}],["configuration",{"_index":95,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["configuration,'library",{"_index":444,"title":{},"body":{"index.html":{}}}],["configures",{"_index":318,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["console.log(v",{"_index":259,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["constructor",{"_index":153,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["constructor(ndynamicrendererservice",{"_index":154,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["constructor(private",{"_index":346,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["containerised",{"_index":25,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["contains",{"_index":190,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{}}}],["context",{"_index":378,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":353,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":200,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["created",{"_index":467,"title":{},"body":{"index.html":{}}}],["creates",{"_index":317,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["css",{"_index":40,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["custom",{"_index":290,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["cycle",{"_index":412,"title":{},"body":{"index.html":{}}}],["data",{"_index":473,"title":{},"body":{"index.html":{}}}],["decides",{"_index":168,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["declarations",{"_index":311,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["default",{"_index":212,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":90,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["defined",{"_index":111,"title":{},"body":{"interfaces/KeyValue.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{}}}],["defines",{"_index":476,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":303,"title":{"dependencies.html":{}},"body":{"modules/NDynamicRendererModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":430,"title":{},"body":{"index.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Function.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{}}}],["desides",{"_index":503,"title":{},"body":{"index.html":{}}}],["desktop",{"_index":107,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["details",{"_index":478,"title":{},"body":{"index.html":{}}}],["detects",{"_index":182,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["different",{"_index":102,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["directive",{"_index":295,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["directives",{"_index":298,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["display",{"_index":288,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["display_none",{"_index":287,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["documentation",{"_index":354,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":116,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["download",{"_index":423,"title":{},"body":{"index.html":{}}}],["dynamic",{"_index":7,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["dynamicmodule",{"_index":332,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["dynamicrendererservice",{"_index":458,"title":{},"body":{"index.html":{}}}],["each",{"_index":22,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["eg",{"_index":79,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["element",{"_index":294,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["enter",{"_index":431,"title":{},"body":{"index.html":{}}}],["eq",{"_index":494,"title":{},"body":{"index.html":{}}}],["error",{"_index":175,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["erroremit",{"_index":140,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["erroremit(error",{"_index":173,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["errors",{"_index":265,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["errors?.foreach((error",{"_index":266,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["evaluted",{"_index":269,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["event",{"_index":176,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["eventemitter",{"_index":163,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["executed",{"_index":282,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["executes",{"_index":204,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["expanded",{"_index":34,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["expansion",{"_index":24,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["expansional",{"_index":35,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["exports",{"_index":312,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["expr",{"_index":271,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["expression",{"_index":69,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["false",{"_index":480,"title":{},"body":{"index.html":{}}}],["fb",{"_index":156,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["female",{"_index":496,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{}}}],["file:n",{"_index":396,"title":{},"body":{"dependencies.html":{}}}],["fires",{"_index":177,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["flex",{"_index":45,"title":{"interfaces/Flex.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"index.html":{}}}],["flexlayoutmodule",{"_index":344,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["flexval",{"_index":131,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["follow",{"_index":469,"title":{},"body":{"index.html":{}}}],["following",{"_index":416,"title":{},"body":{"index.html":{}}}],["formats",{"_index":231,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["formbuilder",{"_index":157,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["formchangedetection",{"_index":141,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["formcontrol",{"_index":75,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["formcontroller",{"_index":84,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["formcontrolmapper",{"_index":132,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["formcontrols",{"_index":184,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["formgroup",{"_index":186,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["formsmodule",{"_index":340,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["forroot",{"_index":314,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["forroot(config",{"_index":315,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["full",{"_index":410,"title":{},"body":{"index.html":{}}}],["function",{"_index":16,"title":{"interfaces/Function.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{}}}],["functionname",{"_index":98,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["functions",{"_index":12,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["generated",{"_index":85,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["generates",{"_index":415,"title":{},"body":{"index.html":{}}}],["getcomponent",{"_index":142,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["getcomponent(metadata",{"_index":187,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["getinputs",{"_index":143,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["getinputs(leaf",{"_index":193,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["getmessage1",{"_index":488,"title":{},"body":{"index.html":{}}}],["getmessage2",{"_index":492,"title":{},"body":{"index.html":{}}}],["getmessage3",{"_index":493,"title":{},"body":{"index.html":{}}}],["gets",{"_index":268,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["getting",{"_index":405,"title":{"index.html":{}},"body":{}}],["handling",{"_index":511,"title":{},"body":{"index.html":{}}}],["header",{"_index":33,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["here",{"_index":509,"title":{},"body":{"index.html":{}}}],["homepagecomponent",{"_index":457,"title":{},"body":{"index.html":{}}}],["html",{"_index":293,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["https://example.com/object1666938433.json",{"_index":520,"title":{},"body":{"index.html":{}}}],["i.e",{"_index":329,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["id",{"_index":54,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["identifier",{"_index":355,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":121,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["import",{"_index":224,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["imports",{"_index":101,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":110,"title":{},"body":{"interfaces/KeyValue.html":{},"interfaces/Options.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["information",{"_index":191,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["initview",{"_index":144,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["initview(viewpanels",{"_index":196,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["injectable",{"_index":371,"title":{},"body":{"coverage.html":{},"index.html":{},"overview.html":{}}}],["input",{"_index":225,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["input1component",{"_index":463,"title":{},"body":{"index.html":{}}}],["inputclasscomponent",{"_index":442,"title":{},"body":{"index.html":{}}}],["inputclasscomponent1",{"_index":453,"title":{},"body":{"index.html":{}}}],["inputclasscomponent2",{"_index":455,"title":{},"body":{"index.html":{}}}],["inputcomponent",{"_index":462,"title":{},"body":{"index.html":{}}}],["inputs",{"_index":68,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["install",{"_index":421,"title":{},"body":{"index.html":{}}}],["installation",{"_index":419,"title":{},"body":{"index.html":{}}}],["installed",{"_index":437,"title":{},"body":{"index.html":{}}}],["instance",{"_index":189,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"overview.html":{}}}],["interfaces/interface",{"_index":232,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{}}}],["it's",{"_index":446,"title":{},"body":{"index.html":{}}}],["item",{"_index":23,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["iterates",{"_index":198,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["key",{"_index":37,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["keyvalue",{"_index":49,"title":{"interfaces/KeyValue.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{}}}],["label",{"_index":96,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["layout",{"_index":43,"title":{"interfaces/Layout.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["leaf",{"_index":53,"title":{"interfaces/Leaf.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{}}}],["leaf.metadata.options",{"_index":257,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["leaf.metadata.options.formcontroller",{"_index":250,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["leaf.metadata.options.model_path.substr(1",{"_index":256,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["leaf.metadata.options.type",{"_index":253,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["leaf.metadata.options?.model_path",{"_index":252,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["leafs",{"_index":52,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["legacy",{"_index":434,"title":{},"body":{"index.html":{}}}],["legend",{"_index":292,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["level",{"_index":29,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["libraries",{"_index":320,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["library",{"_index":62,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["library1",{"_index":451,"title":{},"body":{"index.html":{}}}],["library2",{"_index":454,"title":{},"body":{"index.html":{}}}],["libraryname",{"_index":323,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["life",{"_index":411,"title":{},"body":{"index.html":{}}}],["literal",{"_index":535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loading",{"_index":408,"title":{},"body":{"index.html":{}}}],["look",{"_index":417,"title":{},"body":{"index.html":{}}}],["manage",{"_index":427,"title":{},"body":{"index.html":{}}}],["manager",{"_index":424,"title":{},"body":{"index.html":{}}}],["manulife",{"_index":485,"title":{},"body":{"index.html":{}}}],["many",{"_index":449,"title":{},"body":{"index.html":{}}}],["matcardmodule",{"_index":336,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["matching",{"_index":109,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matexpansionmodule",{"_index":334,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["matinputmodule",{"_index":338,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["metadata",{"_index":56,"title":{"interfaces/Metadata.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"index.html":{}}}],["metadata.expression",{"_index":272,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["metadata?.expression",{"_index":270,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["methods",{"_index":138,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{}}}],["miscellaneous",{"_index":527,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mobile",{"_index":105,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["mobile,tablet,desktop",{"_index":46,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["model",{"_index":77,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["model_path",{"_index":76,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["modelchange",{"_index":151,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["modelform",{"_index":134,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["modelpath",{"_index":211,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["module",{"_index":300,"title":{"modules/NDynamicRendererModule.html":{}},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":302,"title":{"modules.html":{}},"body":{"modules/NDynamicRendererModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":324,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["n",{"_index":124,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"dependencies.html":{},"index.html":{}}}],["name",{"_index":32,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["name,version,angular",{"_index":432,"title":{},"body":{"index.html":{}}}],["ncomponentmodules",{"_index":460,"title":{},"body":{"index.html":{}}}],["ndynamicrenderer",{"_index":407,"title":{},"body":{"index.html":{}}}],["ndynamicrenderercomponent",{"_index":113,"title":{"components/NDynamicRendererComponent.html":{}},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"coverage.html":{},"overview.html":{}}}],["ndynamicrenderermodule",{"_index":301,"title":{"modules/NDynamicRendererModule.html":{}},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["ndynamicrendererservice",{"_index":155,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"coverage.html":{}}}],["needs",{"_index":65,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["neutrinos",{"_index":452,"title":{},"body":{"index.html":{}}}],["new",{"_index":235,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"coverage.html":{}}}],["ng",{"_index":333,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"dependencies.html":{}}}],["ngmodule",{"_index":330,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["ngoninit",{"_index":145,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["nmatbuttoncomponent",{"_index":486,"title":{},"body":{"index.html":{}}}],["none",{"_index":289,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["npm",{"_index":420,"title":{},"body":{"index.html":{}}}],["number",{"_index":55,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["number(this.modelform.value[i",{"_index":279,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["object",{"_index":82,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["objects",{"_index":450,"title":{},"body":{"index.html":{}}}],["onerror",{"_index":152,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["onerror($event)\";example",{"_index":515,"title":{},"body":{"index.html":{}}}],["onerror(error",{"_index":513,"title":{},"body":{"index.html":{}}}],["oninit",{"_index":122,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["open",{"_index":426,"title":{},"body":{"index.html":{}}}],["optional",{"_index":15,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["options",{"_index":67,"title":{"interfaces/Options.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"index.html":{}}}],["out",{"_index":309,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["output",{"_index":226,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["output_events",{"_index":81,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["outputevents",{"_index":83,"title":{"interfaces/OutputEvents.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{}}}],["outputmethods",{"_index":147,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["outputmethods(change_event",{"_index":202,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["outputs",{"_index":135,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["overview",{"_index":524,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":382,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["pair",{"_index":39,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["pairs",{"_index":500,"title":{},"body":{"index.html":{}}}],["panel",{"_index":20,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"miscellaneous/typealiases.html":{}}}],["panel?.panel_name",{"_index":286,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["panel_name",{"_index":31,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["panels",{"_index":21,"title":{"interfaces/Panels.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["param",{"_index":243,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{}}}],["parameters",{"_index":159,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{}}}],["parse",{"_index":91,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["parsemodel",{"_index":148,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["pass",{"_index":436,"title":{},"body":{"index.html":{}}}],["passed",{"_index":86,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["passes",{"_index":195,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["path",{"_index":78,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["plugins",{"_index":428,"title":{},"body":{"index.html":{}}}],["pops",{"_index":178,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["prepare",{"_index":448,"title":{},"body":{"index.html":{}}}],["prepareformcontrol",{"_index":149,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["prepareformcontrol(model_path",{"_index":208,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["prepares",{"_index":210,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["preparing",{"_index":439,"title":{},"body":{"index.html":{}}}],["present",{"_index":502,"title":{},"body":{"index.html":{}}}],["private",{"_index":233,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["projects/.../interface.ts",{"_index":530,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../test.ts",{"_index":532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/n",{"_index":6,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{},"properties.html":{}}}],["property",{"_index":468,"title":{},"body":{"index.html":{}}}],["provide",{"_index":348,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["provided",{"_index":321,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["providers",{"_index":347,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["public",{"_index":133,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{}}}],["pulled",{"_index":87,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["reactiveformsmodule",{"_index":341,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["registered",{"_index":185,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["render",{"_index":192,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["rendered",{"_index":170,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer",{"_index":125,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["renderer.component",{"_index":331,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["renderer.component.css",{"_index":127,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.html",{"_index":129,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts",{"_index":120,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"coverage.html":{}}}],["renderer.component.ts:133",{"_index":188,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:146",{"_index":194,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:167",{"_index":181,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:194",{"_index":167,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:21",{"_index":158,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:213",{"_index":206,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:231",{"_index":203,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:256",{"_index":174,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:29",{"_index":162,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:30",{"_index":160,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:31",{"_index":161,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:32",{"_index":164,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:33",{"_index":165,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:34",{"_index":215,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:35",{"_index":223,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:36",{"_index":214,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:37",{"_index":217,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:38",{"_index":222,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:40",{"_index":221,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:46",{"_index":201,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:58",{"_index":197,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.component.ts:81",{"_index":209,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["renderer.module.ts",{"_index":310,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["renderer.module.ts:32",{"_index":316,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["renderer.module.ts:51",{"_index":327,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["renderer.service",{"_index":229,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{}}}],["renderer.service.ts",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["renderer/n",{"_index":119,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"coverage.html":{}}}],["renderer/src/lib/interfaces/interface.ts",{"_index":8,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["renderer/src/lib/interfaces/interface.ts:21",{"_index":112,"title":{},"body":{"interfaces/KeyValue.html":{}}}],["renderer/src/lib/interfaces/interface.ts:85",{"_index":352,"title":{},"body":{"interfaces/Options.html":{}}}],["renderer/src/lib/n",{"_index":118,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"coverage.html":{}}}],["renderer/src/test.ts",{"_index":376,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["renderered",{"_index":66,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["rendererimports",{"_index":459,"title":{},"body":{"index.html":{}}}],["require",{"_index":379,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":319,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"index.html":{}}}],["reset",{"_index":308,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}],["resetconfig",{"_index":325,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["resetconfig(config",{"_index":326,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["resetrenderercomponents",{"_index":464,"title":{},"body":{"index.html":{}}}],["resets",{"_index":328,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["resolutions.set",{"_index":505,"title":{},"body":{"index.html":{}}}],["respective",{"_index":409,"title":{},"body":{"index.html":{}}}],["responsive",{"_index":44,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["result",{"_index":218,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["results",{"_index":108,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":247,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{}}}],["returns",{"_index":172,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{}}}],["root",{"_index":517,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":399,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":487,"title":{},"body":{"index.html":{}}}],["schema",{"_index":88,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["schema\";onerror",{"_index":510,"title":{},"body":{"index.html":{}}}],["schema.supports",{"_index":470,"title":{},"body":{"index.html":{}}}],["screen",{"_index":103,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["section",{"_index":51,"title":{"interfaces/Section.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"index.html":{}}}],["sections",{"_index":50,"title":{"interfaces/Sections.html":{}},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"index.html":{}}}],["selector",{"_index":123,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["service",{"_index":435,"title":{},"body":{"index.html":{}}}],["set",{"_index":28,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["sets",{"_index":71,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["show",{"_index":72,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["sizes",{"_index":104,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["someother",{"_index":92,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["spec\\.ts",{"_index":534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["started",{"_index":406,"title":{"index.html":{}},"body":{}}],["statements",{"_index":356,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":313,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["story",{"_index":425,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":74,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["string",{"_index":42,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["structure",{"_index":440,"title":{},"body":{"index.html":{}}}],["structured",{"_index":418,"title":{},"body":{"index.html":{}}}],["styles",{"_index":36,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["styles','layout",{"_index":498,"title":{},"body":{"index.html":{}}}],["styles,layout",{"_index":27,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["styleurls",{"_index":126,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["submit",{"_index":60,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"miscellaneous/typealiases.html":{}}}],["support",{"_index":413,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":522,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":275,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["table",{"_index":381,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":380,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":106,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["takes",{"_index":10,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["template",{"_index":115,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["templateurl",{"_index":128,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["text",{"_index":30,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["this.ajv",{"_index":234,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.erroremit(error",{"_index":246,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.fb.group",{"_index":216,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.formchangedetection",{"_index":242,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.formcontrolmapper[leaf.id",{"_index":251,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.initview(this.viewpanels",{"_index":241,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.model",{"_index":239,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.modelchange.emit(updatedmodel",{"_index":264,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.modelform.value",{"_index":262,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.modelform.value[i",{"_index":278,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.modelform.valuechanges.subscribe((v",{"_index":258,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.ncomponentmodules",{"_index":461,"title":{},"body":{"index.html":{}}}],["this.ndynamicrenderermodule.resetconfig(config",{"_index":465,"title":{},"body":{"index.html":{}}}],["this.ndynamicrendererservice.callfunction",{"_index":284,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.ndynamicrendererservice.config",{"_index":350,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["this.ndynamicrendererservice.evaluateexpression",{"_index":273,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.ndynamicrendererservice.getcomponents(metadata",{"_index":248,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.ndynamicrendererservice.getinputtype",{"_index":254,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.ndynamicrendererservice.getvalidatorsfromschema",{"_index":255,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.ndynamicrendererservice.resetconfig",{"_index":351,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["this.ndynamicrendererservice.updateobject",{"_index":261,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.onerror.emit(error",{"_index":285,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.outputmethods(result",{"_index":220,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.parsemodel",{"_index":260,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.schema",{"_index":240,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.typemapper[i",{"_index":276,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.view",{"_index":238,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["this.viewpanels",{"_index":237,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["through",{"_index":199,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["title",{"_index":521,"title":{},"body":{"index.html":{}}}],["tree",{"_index":117,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["true",{"_index":274,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":244,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["tslib",{"_index":401,"title":{},"body":{"dependencies.html":{}}}],["tv",{"_index":47,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{}}}],["two",{"_index":471,"title":{},"body":{"index.html":{}}}],["type",{"_index":17,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":528,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typemapper",{"_index":136,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["ui",{"_index":171,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["understand",{"_index":507,"title":{},"body":{"index.html":{}}}],["up",{"_index":179,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["update",{"_index":73,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["updatedmodel",{"_index":263,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["updateon",{"_index":57,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["updates",{"_index":207,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["usage",{"_index":422,"title":{},"body":{"index.html":{}}}],["used",{"_index":89,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["user",{"_index":94,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{}}}],["usevalue",{"_index":349,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["uuid1",{"_index":483,"title":{},"body":{"index.html":{}}}],["validators",{"_index":267,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["value",{"_index":38,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"components/NDynamicRendererComponent.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":296,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["variable",{"_index":377,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":531,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":61,"title":{},"body":{"interfaces/ChangeEvent.html":{},"interfaces/Config.html":{},"interfaces/Flex.html":{},"interfaces/Function.html":{},"interfaces/KeyValue.html":{},"interfaces/Layout.html":{},"interfaces/Leaf.html":{},"interfaces/Metadata.html":{},"interfaces/Options.html":{},"interfaces/OutputEvents.html":{},"interfaces/Panels.html":{},"interfaces/Section.html":{},"interfaces/Sections.html":{},"index.html":{},"properties.html":{}}}],["view",{"_index":150,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"index.html":{}}}],["view\";every",{"_index":497,"title":{},"body":{"index.html":{}}}],["viewpanels",{"_index":137,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["void",{"_index":180,"title":{},"body":{"components/NDynamicRendererComponent.html":{},"modules/NDynamicRendererModule.html":{}}}],["way",{"_index":472,"title":{},"body":{"index.html":{}}}],["well",{"_index":475,"title":{},"body":{"index.html":{}}}],["whether",{"_index":169,"title":{},"body":{"components/NDynamicRendererComponent.html":{}}}],["width",{"_index":504,"title":{},"body":{"index.html":{}}}],["yes",{"_index":322,"title":{},"body":{"modules/NDynamicRendererModule.html":{}}}],["zone.js",{"_index":403,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":307,"title":{},"body":{"modules/NDynamicRendererModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ChangeEvent.html":{"url":"interfaces/ChangeEvent.html","title":"interface - ChangeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChangeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                It takes array of functions\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            functions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        functions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        functions:         Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            imports\n                                        \n                                \n                                \n                                        \n                                            library\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        imports\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imports:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        library\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        library:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Flex.html":{"url":"interfaces/Flex.html","title":"interface - Flex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Flex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Function.html":{"url":"interfaces/Function.html","title":"interface - Function","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Function\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                functionName - Name of the function.\nArguments - Which are optional are passed as arguments.\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            arguments\n                                        \n                                \n                                \n                                        \n                                            functionName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        arguments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        arguments:     number[] | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[] | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        functionName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        functionName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/KeyValue.html":{"url":"interfaces/KeyValue.html","title":"interface - KeyValue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  KeyValue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in projects/n-dynamic-renderer/src/lib/interfaces/interface.ts:21\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Layout.html":{"url":"interfaces/Layout.html","title":"interface - Layout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Layout\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Define flex for different screen sizes\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            desktop\n                                        \n                                \n                                \n                                        \n                                            mobile\n                                        \n                                \n                                \n                                        \n                                            tablet\n                                        \n                                \n                                \n                                        \n                                            tv\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        desktop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        desktop:         Flex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Flex\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mobile\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mobile:         Flex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Flex\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tablet\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tablet:         Flex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Flex\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tv\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tv:         Flex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Flex\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Leaf.html":{"url":"interfaces/Leaf.html","title":"interface - Leaf","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Leaf\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                 styles,layout can be set on the Leaf level too.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            class\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            layout\n                                        \n                                \n                                \n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        layout:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         Metadata\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Metadata\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metadata.html":{"url":"interfaces/Metadata.html","title":"interface - Metadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Metadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                version- Version of the library.\nlibrary- Name of the library.\ncomponent_name - Name of the component that needs to be renderered.\noptions- The options are the inputs to the component.\nexpression - The condition that sets to show the component.\nupdateOn - The update strategy on the formControl\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component_name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expression\n                                        \n                                \n                                \n                                        \n                                            library\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            updateOn\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expression\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expression:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        library\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        library:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         Options\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Options\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateOn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateOn:         updateOn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         updateOn\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NDynamicRendererComponent.html":{"url":"components/NDynamicRendererComponent.html","title":"component - NDynamicRendererComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NDynamicRendererComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                n-dynamic-renderer\n            \n\n            \n                styleUrls\n                ./n-dynamic-renderer.component.css\n            \n\n\n\n            \n                templateUrl\n                ./n-dynamic-renderer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ajv\n                            \n                            \n                                flexVal\n                            \n                            \n                                formControlMapper\n                            \n                            \n                                    Public\n                                modelForm\n                            \n                            \n                                outputs\n                            \n                            \n                                typeMapper\n                            \n                            \n                                viewPanels\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                componentValidation\n                            \n                            \n                                errorEmit\n                            \n                            \n                                formChangeDetection\n                            \n                            \n                                getComponent\n                            \n                            \n                                getInputs\n                            \n                            \n                                initView\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Async\n                                outputMethods\n                            \n                            \n                                parseModel\n                            \n                            \n                                prepareFormControl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                model\n                            \n                            \n                                schema\n                            \n                            \n                                view\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                modelChange\n                            \n                            \n                                onError\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(nDynamicRendererService: NDynamicRendererService, fb: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nDynamicRendererService\n                                                  \n                                                        \n                                                                        NDynamicRendererService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        model\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        schema\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:31\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        view\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:29\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        modelChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onError\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:33\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        componentValidation\n                        \n                    \n                \n            \n            \n                \ncomponentValidation(metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:194\n                \n            \n\n\n            \n                \n                    Decides whether the component to be rendered on the UI\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                                Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nA boolean whether to show the component.\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        errorEmit\n                        \n                    \n                \n            \n            \n                \nerrorEmit(error: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:256\n                \n            \n\n\n            \n                \n                    Error event which fires when ever an error pops up in the component.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formChangeDetection\n                        \n                    \n                \n            \n            \n                \nformChangeDetection()\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:167\n                \n            \n\n\n            \n                \n                    Detects the formcontrol changes of all the formcontrols registered with the formGroup\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getComponent\n                        \n                    \n                \n            \n            \n                \ngetComponent(metadata: Metadata)\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:133\n                \n            \n\n\n            \n                \n                    Returns the component instance to the Dynamic Renderer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                                Metadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nContains the information what component to render\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nComponent Instance\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInputs\n                        \n                    \n                \n            \n            \n                \ngetInputs(leaf: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:146\n                \n            \n\n\n            \n                \n                    Passes the inputs that needs to be passed as inputs to the Dynamic Renderer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    leaf\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nMetadata which has inputs\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nReturns the inputs that needs to be passed as inputs to the Dynamic Renderer\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initView\n                        \n                    \n                \n            \n            \n                \ninitView(viewPanels: Panel)\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:58\n                \n            \n\n\n            \n                \n                    Iterates through the view to create formControls\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    viewPanels\n                                    \n                                                Panel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe view Object\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        outputMethods\n                        \n                    \n                \n            \n            \n                \n                    \n                    outputMethods(change_event: ChangeEvent)\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:231\n                \n            \n\n\n            \n                \n                    Executes the functions passed as args\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    change_event\n                                    \n                                                ChangeEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseModel\n                        \n                    \n                \n            \n            \n                \nparseModel()\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:213\n                \n            \n\n\n            \n                \n                    This function updates the model on every formcontrol change\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prepareFormControl\n                        \n                    \n                \n            \n            \n                \nprepareFormControl(model_path: string, section: Section, index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:81\n                \n            \n\n\n            \n                \n                    Prepares FormControls\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model_path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe Modelpath of the Model\n\n\n                                    \n                                \n                                \n                                    section\n                                    \n                                                Section\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe section key in the model\n\n\n                                    \n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nIndex of the leaf in the section.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        ajv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flexVal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                    \n                        \n                                Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formControlMapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        modelForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormGroup\n\n                    \n                \n                \n                    \n                        Default value : this.fb.group({})\n                    \n                \n                    \n                        \n                                Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        outputs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    change_event: async (result: any) => {\n      await this.outputMethods(result);\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typeMapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        viewPanels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { NDynamicRendererService } from '../n-dynamic-renderer.service';\nimport Ajv from 'ajv';\nimport addFormats from 'ajv-formats';\nimport {\n  ChangeEvent,\n  Leaf,\n  Metadata,\n  Panel,\n  Section,\n  Sections,\n} from '../interfaces/interface';\n\n@Component({\n  selector: 'n-dynamic-renderer',\n  templateUrl: './n-dynamic-renderer.component.html',\n  styleUrls: ['./n-dynamic-renderer.component.css'],\n})\nexport class NDynamicRendererComponent implements OnInit {\n  ajv: any;\n  constructor(\n    private nDynamicRendererService: NDynamicRendererService,\n    private fb: FormBuilder\n  ) {\n    this.ajv = new Ajv();\n    addFormats(this.ajv);\n  }\n  @Input() view: any;\n  @Input() model: any;\n  @Input() schema: any;\n  @Output() modelChange = new EventEmitter();\n  @Output() onError = new EventEmitter();\n  formControlMapper: any = {};\n  viewPanels: any;\n  flexVal: number = 100;\n  public modelForm: FormGroup = this.fb.group({});\n  typeMapper: any = {};\n\n  outputs = {\n    change_event: async (result: any) => {\n      await this.outputMethods(result);\n    },\n  };\n\n  ngOnInit(): void {\n    this.viewPanels = this.view || [];\n    this.model = this.model || {};\n    this.schema = this.schema || {};\n    this.initView(this.viewPanels);\n    this.formChangeDetection();\n  }\n\n  /**\n   * Iterates through the view to create formControls\n   * @param viewPanels - The view Object\n   */\n  initView(viewPanels: Panel) {\n    try {\n      for (let i = 0; i  this.errorEmit(error));\n    }\n  }\n\n  /**\n   * Returns the component instance to the Dynamic Renderer\n   * @param metadata - Contains the information what component to render\n   * @returns - Component Instance\n   */\n  getComponent(metadata: Metadata) {\n    try {\n      return this.nDynamicRendererService.getComponents(metadata);\n    } catch (error) {\n      this.errorEmit(error);\n    }\n  }\n\n  /**\n   *Passes the inputs that needs to be passed as inputs to the Dynamic Renderer\n   * @param leaf - Metadata which has inputs\n   * @returns - Returns the inputs that needs to be passed as inputs to the Dynamic Renderer\n   */\n  getInputs(leaf: any) {\n    try {\n      leaf.metadata.options.formController = this.formControlMapper[leaf.id];\n      if (leaf.metadata.options?.model_path) {\n        leaf.metadata.options.type = this.nDynamicRendererService.getInputType(\n          this.nDynamicRendererService.getValidatorsFromSchema(\n            this.schema,\n            leaf.metadata.options.model_path.substr(1)\n          )?.type\n        );\n      }\n      return leaf.metadata.options ;\n    } catch (error) {\n      this.errorEmit(error);\n    }\n  }\n\n  /**\n   * Detects the formcontrol changes of all the formcontrols registered with the formGroup\n   */\n\n  formChangeDetection() {\n    try {\n      this.modelForm.valueChanges.subscribe((v) => {\n        // console.log(v);\n        this.parseModel();\n        this.nDynamicRendererService.updateObject(\n          this.modelForm.value,\n          this.model,\n          this.schema,\n          (updatedModel: any) => {\n            this.modelChange.emit(updatedModel);\n          },\n          (errors: any) => {\n            errors?.forEach((error: any) => this.errorEmit(error));\n          }\n        );\n      });\n    } catch (error) {\n      this.errorEmit(error);\n    }\n  }\n\n  /**\n   * Decides whether the component to be rendered on the UI\n   * @param validators - Gets the expression to be evaluted .\n   * @returns - A boolean whether to show the component.\n   */\n  componentValidation(metadata: Metadata) {\n    try {\n      if (metadata?.expression) {\n        // let expr = metadata.expression);\n        return this.nDynamicRendererService.evaluateExpression(\n          metadata.expression,\n          this.model\n        );\n      }\n      return true;\n    } catch (error) {\n      this.errorEmit(error);\n    }\n  }\n\n  /**\n   * This function updates the model on every formcontrol change\n   */\n\n  parseModel() {\n    for (let i in this.modelForm.value) {\n      switch (this.typeMapper[i]) {\n        case 'number':\n          this.modelForm.value[i] = Number(this.modelForm.value[i]);\n          break;\n        case 'boolean':\n          this.modelForm.value[i] = Boolean(this.modelForm.value[i]);\n          break;\n        default:\n      }\n    }\n  }\n\n  /**\n   * Executes the functions passed as args\n   * @param result - Its array of functions that needs to be executed\n   */\n  async outputMethods(change_event: ChangeEvent) {\n    try {\n      if (change_event?.functions) {\n        await this.nDynamicRendererService.callFunction(\n          change_event?.functions,\n          this.model,\n          this.view,\n          this.schema,\n          (updatedModel: any) => {\n            this.modelChange.emit(updatedModel);\n          },\n          (errors: any) => {\n            errors?.forEach((error: any) => this.errorEmit(error));\n          }\n        );\n      }\n    } catch (error) {\n      this.errorEmit(error);\n    }\n  }\n\n  /**\n   * Error event which fires when ever an error pops up in the component.\n   * @param error\n   */\n  errorEmit(error: any) {\n    this.onError.emit(error);\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          \n            {{ panel?.panel_name }}\n          \n           \n        \n\n        \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n          \n        \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./n-dynamic-renderer.component.css\n                \n                .display_none{\n    display: none;\n\n}\n.custom{\n    color:blue\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                          {{ panel?.panel_name }}                                                                                                                                                                                                     '\n    var COMPONENTS = [{'name': 'NDynamicRendererComponent', 'selector': 'n-dynamic-renderer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NDynamicRendererComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NDynamicRendererModule.html":{"url":"modules/NDynamicRendererModule.html","title":"module - NDynamicRendererModule","body":"\n                   \n\n\n\n\n    Modules\n    NDynamicRendererModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NDynamicRendererModule\n\n\n\ncluster_NDynamicRendererModule_exports\n\n\n\ncluster_NDynamicRendererModule_declarations\n\n\n\n\nNDynamicRendererComponent\n\nNDynamicRendererComponent\n\n\n\nNDynamicRendererModule\n\nNDynamicRendererModule\n\nNDynamicRendererModule -->\n\nNDynamicRendererComponent->NDynamicRendererModule\n\n\n\n\n\nNDynamicRendererComponent \n\nNDynamicRendererComponent \n\nNDynamicRendererComponent  -->\n\nNDynamicRendererModule->NDynamicRendererComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/n-dynamic-renderer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NDynamicRendererComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NDynamicRendererComponent\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config?: Config[])\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer.module.ts:32\n                \n            \n\n\n            \n                \n                    Creates and configures a module with all the required libraries and their components provided.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                Config[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe config which contains the libraryName and its imports.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        resetConfig\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetConfig(config: Config[])\n                \n            \n\n\n            \n                \n                    Defined in projects/n-dynamic-renderer/src/lib/n-dynamic-renderer.module.ts:51\n                \n            \n\n\n            \n                \n                    Resets the config i.e., the imports modules.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                Config[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NDynamicRendererComponent } from './n-dynamic-renderer/n-dynamic-renderer.component';\nimport { DynamicModule } from 'ng-dynamic-component';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatInputModule } from '@angular/material/input';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NDynamicRendererService } from './n-dynamic-renderer.service';\nimport { Config } from './interfaces/interface';\n@NgModule({\n  declarations: [NDynamicRendererComponent],\n  imports: [\n    MatExpansionModule,\n    MatCardModule,\n    DynamicModule,\n    MatInputModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    FlexLayoutModule,\n  ],\n  exports: [NDynamicRendererComponent],\n})\nexport class NDynamicRendererModule {\n  constructor(private NDynamicRendererService: NDynamicRendererService) {}\n  /**\n   * Creates and configures a module with all the required libraries and their components provided.\n   * @param config {Config[]}- The config which contains the libraryName and its imports.\n   */\n  static forRoot(\n    config?: Config[]\n  ): ModuleWithProviders {\n    return {\n      ngModule: NDynamicRendererModule,\n      providers: [\n        NDynamicRendererService,\n        { provide: 'config', useValue: config },\n      ],\n    };\n  }\n\n  public get config() {\n    return this.NDynamicRendererService.config;\n  }\n  /**\n   * Resets the config i.e., the imports modules.\n   * @param config\n   */\n  public resetConfig(config: Config[]) {\n    this.NDynamicRendererService.resetConfig = config;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Options.html":{"url":"interfaces/Options.html","title":"interface - Options","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Options\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Options are the inputs to the component.\nmodel_path - The model path with @ .Eg: @case.personaldetails.name\noutput_events - It is an object of OutputEvents\nformController - This is generated by the library and is passed to the component.\ntype - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\nIt takes someOther inputs based on the user configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            formController\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            model_path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            output_events\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in projects/n-dynamic-renderer/src/lib/interfaces/interface.ts:85\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        formController\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formController:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        model_path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        model_path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        output_events\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        output_events:         OutputEvents\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OutputEvents\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OutputEvents.html":{"url":"interfaces/OutputEvents.html","title":"interface - OutputEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OutputEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            change_event\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        change_event\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        change_event:         ChangeEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ChangeEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Panels.html":{"url":"interfaces/Panels.html","title":"interface - Panels","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Panels\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\npanel_name - Name of the Expansion Panel Header.\nexpanded - Expansional Panel to be expanded or not.\nstyles- A key value pair of the CSS Styles.\nclass - string | string[]\nlayout - Responsive flex properties for mobile,tablet,desktop and tv\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            class\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expanded\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            layout\n                                        \n                                \n                                \n                                        \n                                            panel_name\n                                        \n                                \n                                \n                                        \n                                            sections\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        class:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expanded\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expanded:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        layout:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        panel_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        panel_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sections\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sections:     Sections[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Sections[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Section.html":{"url":"interfaces/Section.html","title":"interface - Section","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Section\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            class\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            layout\n                                        \n                                \n                                \n                                        \n                                            leafs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        class\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        class:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        layout:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leafs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leafs:         Leaf[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Leaf[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:         KeyValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KeyValue\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sections.html":{"url":"interfaces/Sections.html","title":"interface - Sections","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Sections\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            section\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        section\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        section:         Section\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Section\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Panel = Panels[];\n/**\n * Each item in the Expansion Panel is containerised by a card and styles,layout can be set on the panel level.\n * ```text\n * panel_name - Name of the Expansion Panel Header.\n * expanded - Expansional Panel to be expanded or not.\n * styles- A key value pair of the CSS Styles.\n * class - string | string[]\n * layout - Responsive flex properties for mobile,tablet,desktop and tv\n * ```\n */\nexport interface Panels {\n  panel_name: string;\n  expanded?: boolean;\n  styles?: KeyValue;\n  class?: string | string[];\n  layout?: KeyValue;\n  sections: Sections[];\n}\n\nexport interface KeyValue {\n  [key: string]: any;\n}\n\nexport interface Sections {\n  section: Section;\n}\n\n/**\n * Each item in the Section is containerised by a card and styles,layout can be set on the Section level.\n */\nexport interface Section {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  leafs: Leaf[];\n}\n\n/**\n *  styles,layout can be set on the Leaf level too.\n */\n\nexport interface Leaf {\n  styles?: KeyValue;\n  class?: string;\n  layout?: KeyValue;\n  id: string | number;\n  metadata: Metadata;\n}\n\ntype updateOn = 'change' | 'blur' | 'submit';\n\n/**\n * ```\n * version- Version of the library.\n * library- Name of the library.\n * component_name - Name of the component that needs to be renderered.\n * options- The options are the inputs to the component.\n * expression - The condition that sets to show the component.\n * updateOn - The update strategy on the formControl\n * ```\n */\nexport interface Metadata {\n  version: string;\n  library: string;\n  component_name: string;\n  options: Options;\n  expression?: KeyValue;\n  updateOn: updateOn;\n}\n/**\n * Options are the inputs to the component.\n * model_path - The model path with @ .Eg: @case.personaldetails.name\n * output_events - It is an object of OutputEvents\n * formController - This is generated by the library and is passed to the component.\n * type - Type is pulled from schema and is used to define the type on formcontroller and to parse the value\n * It takes someOther inputs based on the user configuration\n */\nexport interface Options {\n  model_path?: string;\n  output_events?: OutputEvents;\n  label?: string;\n  options?: any;\n  formController?: any;\n  type?: any;\n  [key: string]: any;\n}\n\nexport interface OutputEvents {\n  change_event: ChangeEvent;\n}\n/**\n * It takes array of functions\n */\nexport interface ChangeEvent {\n  functions?: Function[];\n}\n/**\n * ```\n * functionName - Name of the function.\n * Arguments - Which are optional are passed as arguments.\n */\nexport interface Function {\n  functionName: string;\n  arguments?: number[] | string[];\n}\n\nexport interface Config {\n  library: string;\n  imports: any;\n}\n/**\n * Define flex for different screen sizes\n */\nexport interface Layout {\n  mobile: Flex;\n  tablet: Flex;\n  desktop: Flex;\n  tv: Flex;\n}\n\nexport interface Flex {\n  flex: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            ChangeEvent\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Flex\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Function\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            KeyValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Layout\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Leaf\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Metadata\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Options\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            OutputEvents\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Panels\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Section\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n            \n            interface\n            Sections\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/n-dynamic-renderer.service.ts\n            \n            injectable\n            NDynamicRendererService\n            \n                69 %\n                (16/23)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/lib/n-dynamic-renderer/n-dynamic-renderer.component.ts\n            \n            component\n            NDynamicRendererComponent\n            \n                37 %\n                (9/24)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/test.ts\n            \n            variable\n            context\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/n-dynamic-renderer/src/test.ts\n            \n            variable\n            require\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 12.1.0-\n        \n            @angular/cdk : 12.2.13\n        \n            @angular/common : 12.1.0-\n        \n            @angular/compiler : 12.1.0-\n        \n            @angular/core : 12.1.0-\n        \n            @angular/flex-layout : 12.0.0-beta.34\n        \n            @angular/forms : 12.1.0-\n        \n            @angular/material : 12.2.13\n        \n            @angular/platform-browser : 12.1.0-\n        \n            @angular/platform-browser-dynamic : 12.1.0-\n        \n            @angular/router : 12.1.0-\n        \n            @compodoc/compodoc : 1.1.19\n        \n            n-components : file:n-components-0.0.1.tgz\n        \n            ng-dynamic-component : 8.0.0\n        \n            rxjs : 6.6.0\n        \n            tslib : 2.2.0\n        \n            zone.js : 0.11.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNDynamicRenderer\nIt is a library for loading Dynamic components of the respective libraries with full life-cycle support for inputs and outputs.\nThis library accepts View and generates an UI as the following:\n\n\nLook at the 'View' how it is structured\nInstallation\n$ npm install n-dynamic-renderer\nUsage\nDownload the Case Manager UI Renderer from the story\n\n\nOpen 'Manage Plugins'->Add Dependency->Enter Package Name,Version,Angular Package, Library name, Module Name and checkon the forRoot()\n\n\nCreate a legacy service \n\nPass the libraryname and its components installed in the applications by preparing the following structure:\n[\n  {\n    library: \"Custom Library\",\n    imports: {\n      className: InputClassComponent,\n    },\n  },\n];In the above configuration,'library' should be the library name .'Imports' is an object of key-value pair where key is the componentName it's value should be the actual component.\nYou can prepare as many of an array of objects of library and imports as the following\n[\n  {\n    library1: \"Neutrinos Library1\",\n    imports: {\n      \"InputClassComponent1\": InputClassComponent1,\n    },\n  },\n   {\n    library2: \"Neutrinos Library2\",\n    imports: {\n      \"InputClassComponent1\": InputClassComponent2,\n      \"CheckBoxComponent\": CheckBoxComponent,\n      \"HomePageComponent\": HomePageComponent\n    },\n  },\n];The above configuration can be passed to the library as the following:\n\nimport { NdynamicRendererModule } from ‘n-dynamic-renderer‘\n\n constructor(private NDynamicRendererModule: NDynamicRendererModule) {}\n\nimport { NDynamicRendererModule } from 'n-dynamic-renderer'\n@Injectable()\nexport class dynamicrendererService {\n    rendererImports;\n    nComponentModules\n    constructor(private NDynamicRendererModule: NDynamicRendererModule) {\n        this.nComponentModules = { ...inputComponent, ...input1Component }\n    }\n\n    resetRendererComponents() {\n        let config = [\n            {\n                library: \"Neutrinos Library1\",\n                imports: {\n                    \"InputClassComponent1\": InputClassComponent1,\n                },\n            },\n            {\n                library: \"Neutrinos Library2\",\n                imports: {\n                    \"InputClassComponent1\": InputClassComponent2,\n                    \"CheckBoxComponent\": CheckBoxComponent,\n                    \"HomePageComponent\": HomePageComponent\n                },\n            },\n        ];\n        this.NDynamicRendererModule.resetConfig(config);\n    }\n\n}\nAdd the above code in the legacy service created\n\n\nOptions\n\n[(model)]\n[view]\n[schema]\n(onError)\n\n[model]\n\n\n\nProperty\nType\nRequired\n\n\n\n\n[(model)]\nobject\nRequired\n\n\n\nAccepts an object which should follow the Schema.Supports two way data binding as well.\n[model] = \"model\";\n[view]\n\n\n\nProperty\nType\nRequired\n\n\n\n\n[view]\nArray\nRequired\n\n\n\nView defines how the UI should render.\nDefine view in your component's class\nView = [\n  {\n    panel_name: \"Coverage Details\",\n    styles: {\n      \"show-border\": false,\n    },\n    class:\"panel_color\",\n    expanded: true,\n    sections: [\n      {\n        section: {\n          layout: {\n              mobile: {\n                flex: '100',\n              },\n              tablet: {\n                flex: '100',\n              },\n              desktop: {\n                flex: '100',\n              },\n              tv: {\n                flex: '100',\n              },\n            },\n            styles:{\n              color:'red'\n            }\n          leafs: [\n            {\n              styles: {},\n              layout: {\n                  mobile: {\n                    flex: '100',\n                  },\n                  tablet: {\n                    flex: '100',\n                  },\n                  desktop: {\n                    flex: '100',\n                  },\n                  tv: {\n                    flex: '100',\n                  },\n              },\n              id: \"uuid1\",\n              metadata: {\n                version: \"14.2.0\",\n                library: \"manulife\",\n                component_name: \"NMatButtonComponent\",\n                options: {\n                  label: \"Save\",\n                  output_events: {\n                    change_event: {\n                      functions: [\n                        {\n                          functionName: \"getMessage1\",\n                          arguments: [1, 2, 3],\n                        },\n                        {\n                          functionName: \"getMessage2\",\n                          arguments: [1, 2],\n                        },\n                        {\n                          functionName: \"getMessage3\",\n                        },\n                      ],\n                    },\n                  },\n                },\n                expression: {\n                  $eq: [\n                    \"@case.caseDetails.primaryLife.PersonalDetails.sex\",\n                    \"Female\",\n                  ],\n                },\n                updateOn: \"\",\n              },\n            },\n          ],\n        },\n      },\n    ],\n  },\n];\nThen add in component's template\n[view] = \"View\";Every level in the View has 'styles','layout' and 'class' in common where we defines CSS Styles as key value pairs in styles object , add responsive flex properties for mobile,tablet,desktop and tv in layout object ,define classes that are present in the library\n\nLayout desides the width of the View components on the UI for respective screen resolutions.Set Layout properties accordingly.\n\nUnderstand the 'View' better here\n To understand how Library generates UI .Have a look here!\n\n[schema]\n\n\n\nProperty\nType\nRequired\n\n\n\n\n[schema]\nobject\nRequired\n\n\n\nThe schema for the Model.\n[schema] = \"schema\";onError()\nError handling callback.\n\n\n\nProperty\nType\nRequired\n\n\n\n\n(onError)\ncallback\nOptional\n\n\n\nDefine callback in your component's class\nonError(error: any) {\n  // do anything\n}Then add in component's template\nonError = \"onError($event)\";Example\n\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: `\n    \n  `,\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  schema = {\n    $id: \"https://example.com/object1666938433.json\",\n    title: \"Generated schema for Root\",\n    type: \"object\",\n    properties: {\n      case: {\n        type: \"object\",\n        properties: {},\n      },\n    },\n  };\n  model = {\n    case: {},\n  };\n\n  view =[\n  {\n    panel_name: \"Coverage Details\",\n    styles: {\n      \"show-border\": false,\n    },\n    class:\"panel_color\",\n    expanded: true,\n    sections: [\n      {\n        section: {\n          layout: {\n              mobile: {\n                flex: '100',\n              },\n              tablet: {\n                flex: '100',\n              },\n              desktop: {\n                flex: '100',\n              },\n              tv: {\n                flex: '100',\n              },\n            },\n            styles:{\n              color:'red'\n            }\n          leafs: [\n            {\n              styles: {},\n              layout: {\n                  mobile: {\n                    flex: '100',\n                  },\n                  tablet: {\n                    flex: '100',\n                  },\n                  desktop: {\n                    flex: '100',\n                  },\n                  tv: {\n                    flex: '100',\n                  },\n              },\n              id: \"uuid1\",\n              metadata: {\n                version: \"14.2.0\",\n                library: \"manulife\",\n                component_name: \"NMatButtonComponent\",\n                options: {\n                  label: \"Save\",\n                  output_events: {\n                    change_event: {\n                      functions: [\n                        {\n                          functionName: \"getMessage1\",\n                          arguments: [1, 2, 3],\n                        },\n                        {\n                          functionName: \"getMessage2\",\n                          arguments: [1, 2],\n                        },\n                        {\n                          functionName: \"getMessage3\",\n                        },\n                      ],\n                    },\n                  },\n                },\n                expression: {\n                  $eq: [\n                    \"@case.caseDetails.primaryLife.PersonalDetails.sex\",\n                    \"Female\",\n                  ],\n                },\n                updateOn: \"\",\n              },\n            },\n          ],\n        },\n      },\n    ],\n  },\n];\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NDynamicRendererModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NDynamicRendererModule\n\n\n\ncluster_NDynamicRendererModule_declarations\n\n\n\ncluster_NDynamicRendererModule_exports\n\n\n\n\nNDynamicRendererComponent\n\nNDynamicRendererComponent\n\n\n\nNDynamicRendererModule\n\nNDynamicRendererModule\n\nNDynamicRendererModule -->\n\nNDynamicRendererComponent->NDynamicRendererModule\n\n\n\n\n\nNDynamicRendererComponent \n\nNDynamicRendererComponent \n\nNDynamicRendererComponent  -->\n\nNDynamicRendererModule->NDynamicRendererComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.4\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Panel   (projects/.../interface.ts)\n                        \n                        \n                            updateOn   (projects/.../interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/n-dynamic-renderer/src/lib/interfaces/interface.ts\n    \n    \n        \n            \n                \n                    \n                    Panel\n                \n            \n            \n                \n                            Panels[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    updateOn\n                \n            \n            \n                \n                        \"change\" | \"blur\" | \"submit\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (projects/.../test.ts)\n                        \n                        \n                            require   (projects/.../test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/n-dynamic-renderer/src/test.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require.context('./', true, /\\.spec\\.ts$/)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
